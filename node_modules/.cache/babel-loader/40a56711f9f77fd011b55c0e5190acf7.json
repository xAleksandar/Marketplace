{"ast":null,"code":"import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { SendingQuery, PeerResponse, FinalPeer, QueryError, Provider, Value, AddingPeer, DialingPeer } from './response-types.js';\nimport { Multiaddr } from 'multiaddr';\nexport const mapEvent = event => {\n  if (event.Type === SendingQuery) {\n    return {\n      to: event.ID,\n      name: 'SENDING_QUERY',\n      type: event.Type\n    };\n  }\n\n  if (event.Type === PeerResponse) {\n    return {\n      from: event.ID,\n      name: 'PEER_RESPONSE',\n      type: event.Type,\n      messageType: 0,\n      messageName: 'PUT_VALUE',\n      closer: (event.Responses || []).map(_ref => {\n        let {\n          ID,\n          Addrs\n        } = _ref;\n        return {\n          id: ID,\n          multiaddrs: Addrs.map(addr => new Multiaddr(addr))\n        };\n      }),\n      providers: (event.Responses || []).map(_ref2 => {\n        let {\n          ID,\n          Addrs\n        } = _ref2;\n        return {\n          id: ID,\n          multiaddrs: Addrs.map(addr => new Multiaddr(addr))\n        };\n      })\n    };\n  }\n\n  if (event.Type === FinalPeer) {\n    let peer = {\n      id: event.ID,\n      multiaddrs: []\n    };\n\n    if (event.Responses && event.Responses.length) {\n      peer = {\n        id: event.Responses[0].ID,\n        multiaddrs: event.Responses[0].Addrs.map(addr => new Multiaddr(addr))\n      };\n    }\n\n    return {\n      from: event.ID,\n      name: 'FINAL_PEER',\n      type: event.Type,\n      peer\n    };\n  }\n\n  if (event.Type === QueryError) {\n    return {\n      from: event.ID,\n      name: 'QUERY_ERROR',\n      type: event.Type,\n      error: new Error(event.Extra)\n    };\n  }\n\n  if (event.Type === Provider) {\n    return {\n      from: event.ID,\n      name: 'PROVIDER',\n      type: event.Type,\n      providers: event.Responses.map(_ref3 => {\n        let {\n          ID,\n          Addrs\n        } = _ref3;\n        return {\n          id: ID,\n          multiaddrs: Addrs.map(addr => new Multiaddr(addr))\n        };\n      })\n    };\n  }\n\n  if (event.Type === Value) {\n    return {\n      from: event.ID,\n      name: 'VALUE',\n      type: event.Type,\n      value: uint8ArrayFromString(event.Extra, 'base64pad')\n    };\n  }\n\n  if (event.Type === AddingPeer) {\n    const peers = event.Responses.map(_ref4 => {\n      let {\n        ID\n      } = _ref4;\n      return ID;\n    });\n\n    if (!peers.length) {\n      throw new Error('No peer found');\n    }\n\n    return {\n      name: 'ADDING_PEER',\n      type: event.Type,\n      peer: peers[0]\n    };\n  }\n\n  if (event.Type === DialingPeer) {\n    return {\n      name: 'DIALING_PEER',\n      type: event.Type,\n      peer: event.ID\n    };\n  }\n\n  throw new Error('Unknown DHT event type');\n};","map":{"version":3,"sources":["/home/alex/Documents/gitest/Marketplace/node_modules/ipfs-http-client/esm/src/dht/map-event.js"],"names":["fromString","uint8ArrayFromString","SendingQuery","PeerResponse","FinalPeer","QueryError","Provider","Value","AddingPeer","DialingPeer","Multiaddr","mapEvent","event","Type","to","ID","name","type","from","messageType","messageName","closer","Responses","map","Addrs","id","multiaddrs","addr","providers","peer","length","error","Error","Extra","value","peers"],"mappings":"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","sourcesContent":["import { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport {\n  SendingQuery,\n  PeerResponse,\n  FinalPeer,\n  QueryError,\n  Provider,\n  Value,\n  AddingPeer,\n  DialingPeer\n} from './response-types.js';\nimport { Multiaddr } from 'multiaddr';\nexport const mapEvent = event => {\n  if (event.Type === SendingQuery) {\n    return {\n      to: event.ID,\n      name: 'SENDING_QUERY',\n      type: event.Type\n    };\n  }\n  if (event.Type === PeerResponse) {\n    return {\n      from: event.ID,\n      name: 'PEER_RESPONSE',\n      type: event.Type,\n      messageType: 0,\n      messageName: 'PUT_VALUE',\n      closer: (event.Responses || []).map(({ID, Addrs}) => ({\n        id: ID,\n        multiaddrs: Addrs.map(addr => new Multiaddr(addr))\n      })),\n      providers: (event.Responses || []).map(({ID, Addrs}) => ({\n        id: ID,\n        multiaddrs: Addrs.map(addr => new Multiaddr(addr))\n      }))\n    };\n  }\n  if (event.Type === FinalPeer) {\n    let peer = {\n      id: event.ID,\n      multiaddrs: []\n    };\n    if (event.Responses && event.Responses.length) {\n      peer = {\n        id: event.Responses[0].ID,\n        multiaddrs: event.Responses[0].Addrs.map(addr => new Multiaddr(addr))\n      };\n    }\n    return {\n      from: event.ID,\n      name: 'FINAL_PEER',\n      type: event.Type,\n      peer\n    };\n  }\n  if (event.Type === QueryError) {\n    return {\n      from: event.ID,\n      name: 'QUERY_ERROR',\n      type: event.Type,\n      error: new Error(event.Extra)\n    };\n  }\n  if (event.Type === Provider) {\n    return {\n      from: event.ID,\n      name: 'PROVIDER',\n      type: event.Type,\n      providers: event.Responses.map(({ID, Addrs}) => ({\n        id: ID,\n        multiaddrs: Addrs.map(addr => new Multiaddr(addr))\n      }))\n    };\n  }\n  if (event.Type === Value) {\n    return {\n      from: event.ID,\n      name: 'VALUE',\n      type: event.Type,\n      value: uint8ArrayFromString(event.Extra, 'base64pad')\n    };\n  }\n  if (event.Type === AddingPeer) {\n    const peers = event.Responses.map(({ID}) => ID);\n    if (!peers.length) {\n      throw new Error('No peer found');\n    }\n    return {\n      name: 'ADDING_PEER',\n      type: event.Type,\n      peer: peers[0]\n    };\n  }\n  if (event.Type === DialingPeer) {\n    return {\n      name: 'DIALING_PEER',\n      type: event.Type,\n      peer: event.ID\n    };\n  }\n  throw new Error('Unknown DHT event type');\n};"]},"metadata":{},"sourceType":"module"}