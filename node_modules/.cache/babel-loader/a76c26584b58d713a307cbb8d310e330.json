{"ast":null,"code":"export function encodeEndpoint(url) {\n  const href = String(url);\n\n  if (href === 'undefined') {\n    throw Error('endpoint is required');\n  }\n\n  return href[href.length - 1] === '/' ? href.slice(0, -1) : href;\n}\nexport function decodeRemoteService(json) {\n  return {\n    service: json.Service,\n    endpoint: new URL(json.ApiEndpoint),\n    ...(json.Stat && {\n      stat: decodeStat(json.Stat)\n    })\n  };\n}\nexport function decodeStat(json) {\n  switch (json.Status) {\n    case 'valid':\n      {\n        const {\n          Pinning,\n          Pinned,\n          Queued,\n          Failed\n        } = json.PinCount;\n        return {\n          status: 'valid',\n          pinCount: {\n            queued: Queued,\n            pinning: Pinning,\n            pinned: Pinned,\n            failed: Failed\n          }\n        };\n      }\n\n    case 'invalid':\n      {\n        return {\n          status: 'invalid'\n        };\n      }\n\n    default:\n      {\n        return {\n          status: json.Status\n        };\n      }\n  }\n}","map":{"version":3,"sources":["/home/alex/Documents/gitest/Marketplace/node_modules/ipfs-http-client/esm/src/pin/remote/service/utils.js"],"names":["encodeEndpoint","url","href","String","Error","length","slice","decodeRemoteService","json","service","Service","endpoint","URL","ApiEndpoint","Stat","stat","decodeStat","Status","Pinning","Pinned","Queued","Failed","PinCount","status","pinCount","queued","pinning","pinned","failed"],"mappings":"AAAA,OAAO,SAASA,cAAT,CAAwBC,GAAxB,EAA6B;AAClC,QAAMC,IAAI,GAAGC,MAAM,CAACF,GAAD,CAAnB;;AACA,MAAIC,IAAI,KAAK,WAAb,EAA0B;AACxB,UAAME,KAAK,CAAC,sBAAD,CAAX;AACD;;AACD,SAAOF,IAAI,CAACA,IAAI,CAACG,MAAL,GAAc,CAAf,CAAJ,KAA0B,GAA1B,GAAgCH,IAAI,CAACI,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAhC,GAAoDJ,IAA3D;AACD;AACD,OAAO,SAASK,mBAAT,CAA6BC,IAA7B,EAAmC;AACxC,SAAO;AACLC,IAAAA,OAAO,EAAED,IAAI,CAACE,OADT;AAELC,IAAAA,QAAQ,EAAE,IAAIC,GAAJ,CAAQJ,IAAI,CAACK,WAAb,CAFL;AAGL,QAAGL,IAAI,CAACM,IAAL,IAAa;AAAEC,MAAAA,IAAI,EAAEC,UAAU,CAACR,IAAI,CAACM,IAAN;AAAlB,KAAhB;AAHK,GAAP;AAKD;AACD,OAAO,SAASE,UAAT,CAAoBR,IAApB,EAA0B;AAC/B,UAAQA,IAAI,CAACS,MAAb;AACA,SAAK,OAAL;AAAc;AACV,cAAM;AAACC,UAAAA,OAAD;AAAUC,UAAAA,MAAV;AAAkBC,UAAAA,MAAlB;AAA0BC,UAAAA;AAA1B,YAAoCb,IAAI,CAACc,QAA/C;AACA,eAAO;AACLC,UAAAA,MAAM,EAAE,OADH;AAELC,UAAAA,QAAQ,EAAE;AACRC,YAAAA,MAAM,EAAEL,MADA;AAERM,YAAAA,OAAO,EAAER,OAFD;AAGRS,YAAAA,MAAM,EAAER,MAHA;AAIRS,YAAAA,MAAM,EAAEP;AAJA;AAFL,SAAP;AASD;;AACH,SAAK,SAAL;AAAgB;AACZ,eAAO;AAAEE,UAAAA,MAAM,EAAE;AAAV,SAAP;AACD;;AACH;AAAS;AACL,eAAO;AAAEA,UAAAA,MAAM,EAAEf,IAAI,CAACS;AAAf,SAAP;AACD;AAlBH;AAoBD","sourcesContent":["export function encodeEndpoint(url) {\n  const href = String(url);\n  if (href === 'undefined') {\n    throw Error('endpoint is required');\n  }\n  return href[href.length - 1] === '/' ? href.slice(0, -1) : href;\n}\nexport function decodeRemoteService(json) {\n  return {\n    service: json.Service,\n    endpoint: new URL(json.ApiEndpoint),\n    ...json.Stat && { stat: decodeStat(json.Stat) }\n  };\n}\nexport function decodeStat(json) {\n  switch (json.Status) {\n  case 'valid': {\n      const {Pinning, Pinned, Queued, Failed} = json.PinCount;\n      return {\n        status: 'valid',\n        pinCount: {\n          queued: Queued,\n          pinning: Pinning,\n          pinned: Pinned,\n          failed: Failed\n        }\n      };\n    }\n  case 'invalid': {\n      return { status: 'invalid' };\n    }\n  default: {\n      return { status: json.Status };\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}