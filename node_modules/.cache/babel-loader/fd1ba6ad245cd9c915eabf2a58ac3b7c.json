{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\n\nfunction toPin(type, cid, metadata) {\n  const pin = {\n    type,\n    cid: CID.parse(cid)\n  };\n\n  if (metadata) {\n    pin.metadata = metadata;\n  }\n\n  return pin;\n}\n\nexport const createLs = configure(api => {\n  async function* ls() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let paths = [];\n\n    if (options.paths) {\n      paths = Array.isArray(options.paths) ? options.paths : [options.paths];\n    }\n\n    const res = await api.post('pin/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({ ...options,\n        arg: paths.map(path => `${path}`),\n        stream: true\n      }),\n      headers: options.headers\n    });\n\n    for await (const pin of res.ndjson()) {\n      if (pin.Keys) {\n        for (const cid of Object.keys(pin.Keys)) {\n          yield toPin(pin.Keys[cid].Type, cid, pin.Keys[cid].Metadata);\n        }\n\n        return;\n      }\n\n      yield toPin(pin.Type, pin.Cid, pin.Metadata);\n    }\n  }\n\n  return ls;\n});","map":{"version":3,"sources":["/home/alex/Documents/gitest/Marketplace/node_modules/ipfs-http-client/esm/src/pin/ls.js"],"names":["CID","configure","toUrlSearchParams","toPin","type","cid","metadata","pin","parse","createLs","api","ls","options","paths","Array","isArray","res","post","signal","searchParams","arg","map","path","stream","headers","ndjson","Keys","Object","keys","Type","Metadata","Cid"],"mappings":"AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;;AACA,SAASC,KAAT,CAAeC,IAAf,EAAqBC,GAArB,EAA0BC,QAA1B,EAAoC;AAClC,QAAMC,GAAG,GAAG;AACVH,IAAAA,IADU;AAEVC,IAAAA,GAAG,EAAEL,GAAG,CAACQ,KAAJ,CAAUH,GAAV;AAFK,GAAZ;;AAIA,MAAIC,QAAJ,EAAc;AACZC,IAAAA,GAAG,CAACD,QAAJ,GAAeA,QAAf;AACD;;AACD,SAAOC,GAAP;AACD;;AACD,OAAO,MAAME,QAAQ,GAAGR,SAAS,CAACS,GAAG,IAAI;AACvC,kBAAgBC,EAAhB,GAAiC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAC/B,QAAIC,KAAK,GAAG,EAAZ;;AACA,QAAID,OAAO,CAACC,KAAZ,EAAmB;AACjBA,MAAAA,KAAK,GAAGC,KAAK,CAACC,OAAN,CAAcH,OAAO,CAACC,KAAtB,IAA+BD,OAAO,CAACC,KAAvC,GAA+C,CAACD,OAAO,CAACC,KAAT,CAAvD;AACD;;AACD,UAAMG,GAAG,GAAG,MAAMN,GAAG,CAACO,IAAJ,CAAS,QAAT,EAAmB;AACnCC,MAAAA,MAAM,EAAEN,OAAO,CAACM,MADmB;AAEnCC,MAAAA,YAAY,EAAEjB,iBAAiB,CAAC,EAC9B,GAAGU,OAD2B;AAE9BQ,QAAAA,GAAG,EAAEP,KAAK,CAACQ,GAAN,CAAUC,IAAI,IAAK,GAAGA,IAAM,EAA5B,CAFyB;AAG9BC,QAAAA,MAAM,EAAE;AAHsB,OAAD,CAFI;AAOnCC,MAAAA,OAAO,EAAEZ,OAAO,CAACY;AAPkB,KAAnB,CAAlB;;AASA,eAAW,MAAMjB,GAAjB,IAAwBS,GAAG,CAACS,MAAJ,EAAxB,EAAsC;AACpC,UAAIlB,GAAG,CAACmB,IAAR,EAAc;AACZ,aAAK,MAAMrB,GAAX,IAAkBsB,MAAM,CAACC,IAAP,CAAYrB,GAAG,CAACmB,IAAhB,CAAlB,EAAyC;AACvC,gBAAMvB,KAAK,CAACI,GAAG,CAACmB,IAAJ,CAASrB,GAAT,EAAcwB,IAAf,EAAqBxB,GAArB,EAA0BE,GAAG,CAACmB,IAAJ,CAASrB,GAAT,EAAcyB,QAAxC,CAAX;AACD;;AACD;AACD;;AACD,YAAM3B,KAAK,CAACI,GAAG,CAACsB,IAAL,EAAWtB,GAAG,CAACwB,GAAf,EAAoBxB,GAAG,CAACuB,QAAxB,CAAX;AACD;AACF;;AACD,SAAOnB,EAAP;AACD,CA1BgC,CAA1B","sourcesContent":["import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nfunction toPin(type, cid, metadata) {\n  const pin = {\n    type,\n    cid: CID.parse(cid)\n  };\n  if (metadata) {\n    pin.metadata = metadata;\n  }\n  return pin;\n}\nexport const createLs = configure(api => {\n  async function* ls(options = {}) {\n    let paths = [];\n    if (options.paths) {\n      paths = Array.isArray(options.paths) ? options.paths : [options.paths];\n    }\n    const res = await api.post('pin/ls', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        arg: paths.map(path => `${ path }`),\n        stream: true\n      }),\n      headers: options.headers\n    });\n    for await (const pin of res.ndjson()) {\n      if (pin.Keys) {\n        for (const cid of Object.keys(pin.Keys)) {\n          yield toPin(pin.Keys[cid].Type, cid, pin.Keys[cid].Metadata);\n        }\n        return;\n      }\n      yield toPin(pin.Type, pin.Cid, pin.Metadata);\n    }\n  }\n  return ls;\n});"]},"metadata":{},"sourceType":"module"}