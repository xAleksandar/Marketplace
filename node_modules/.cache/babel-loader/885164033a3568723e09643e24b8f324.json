{"ast":null,"code":"const LOAD_BASE = name => Promise.reject(new Error(`No base found for \"${name}\"`));\n\nexport class Multibases {\n  constructor(options) {\n    this._basesByName = {};\n    this._basesByPrefix = {};\n    this._loadBase = options.loadBase || LOAD_BASE;\n\n    for (const base of options.bases) {\n      this.addBase(base);\n    }\n  }\n\n  addBase(base) {\n    if (this._basesByName[base.name] || this._basesByPrefix[base.prefix]) {\n      throw new Error(`Codec already exists for codec \"${base.name}\"`);\n    }\n\n    this._basesByName[base.name] = base;\n    this._basesByPrefix[base.prefix] = base;\n  }\n\n  removeBase(base) {\n    delete this._basesByName[base.name];\n    delete this._basesByPrefix[base.prefix];\n  }\n\n  async getBase(nameOrPrefix) {\n    if (this._basesByName[nameOrPrefix]) {\n      return this._basesByName[nameOrPrefix];\n    }\n\n    if (this._basesByPrefix[nameOrPrefix]) {\n      return this._basesByPrefix[nameOrPrefix];\n    }\n\n    const base = await this._loadBase(nameOrPrefix);\n\n    if (this._basesByName[base.name] == null && this._basesByPrefix[base.prefix] == null) {\n      this.addBase(base);\n    }\n\n    return base;\n  }\n\n  listBases() {\n    return Object.values(this._basesByName);\n  }\n\n}","map":{"version":3,"sources":["/home/alex/Documents/gitest/Marketplace/node_modules/ipfs-core-utils/esm/src/multibases.js"],"names":["LOAD_BASE","name","Promise","reject","Error","Multibases","constructor","options","_basesByName","_basesByPrefix","_loadBase","loadBase","base","bases","addBase","prefix","removeBase","getBase","nameOrPrefix","listBases","Object","values"],"mappings":"AAAA,MAAMA,SAAS,GAAGC,IAAI,IAAIC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAW,sBAAsBH,IAAM,GAAvC,CAAf,CAA1B;;AACA,OAAO,MAAMI,UAAN,CAAiB;AACtBC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,SAAKC,YAAL,GAAoB,EAApB;AACA,SAAKC,cAAL,GAAsB,EAAtB;AACA,SAAKC,SAAL,GAAiBH,OAAO,CAACI,QAAR,IAAoBX,SAArC;;AACA,SAAK,MAAMY,IAAX,IAAmBL,OAAO,CAACM,KAA3B,EAAkC;AAChC,WAAKC,OAAL,CAAaF,IAAb;AACD;AACF;;AACDE,EAAAA,OAAO,CAACF,IAAD,EAAO;AACZ,QAAI,KAAKJ,YAAL,CAAkBI,IAAI,CAACX,IAAvB,KAAgC,KAAKQ,cAAL,CAAoBG,IAAI,CAACG,MAAzB,CAApC,EAAsE;AACpE,YAAM,IAAIX,KAAJ,CAAW,mCAAmCQ,IAAI,CAACX,IAAM,GAAzD,CAAN;AACD;;AACD,SAAKO,YAAL,CAAkBI,IAAI,CAACX,IAAvB,IAA+BW,IAA/B;AACA,SAAKH,cAAL,CAAoBG,IAAI,CAACG,MAAzB,IAAmCH,IAAnC;AACD;;AACDI,EAAAA,UAAU,CAACJ,IAAD,EAAO;AACf,WAAO,KAAKJ,YAAL,CAAkBI,IAAI,CAACX,IAAvB,CAAP;AACA,WAAO,KAAKQ,cAAL,CAAoBG,IAAI,CAACG,MAAzB,CAAP;AACD;;AACY,QAAPE,OAAO,CAACC,YAAD,EAAe;AAC1B,QAAI,KAAKV,YAAL,CAAkBU,YAAlB,CAAJ,EAAqC;AACnC,aAAO,KAAKV,YAAL,CAAkBU,YAAlB,CAAP;AACD;;AACD,QAAI,KAAKT,cAAL,CAAoBS,YAApB,CAAJ,EAAuC;AACrC,aAAO,KAAKT,cAAL,CAAoBS,YAApB,CAAP;AACD;;AACD,UAAMN,IAAI,GAAG,MAAM,KAAKF,SAAL,CAAeQ,YAAf,CAAnB;;AACA,QAAI,KAAKV,YAAL,CAAkBI,IAAI,CAACX,IAAvB,KAAgC,IAAhC,IAAwC,KAAKQ,cAAL,CAAoBG,IAAI,CAACG,MAAzB,KAAoC,IAAhF,EAAsF;AACpF,WAAKD,OAAL,CAAaF,IAAb;AACD;;AACD,WAAOA,IAAP;AACD;;AACDO,EAAAA,SAAS,GAAG;AACV,WAAOC,MAAM,CAACC,MAAP,CAAc,KAAKb,YAAnB,CAAP;AACD;;AAnCqB","sourcesContent":["const LOAD_BASE = name => Promise.reject(new Error(`No base found for \"${ name }\"`));\nexport class Multibases {\n  constructor(options) {\n    this._basesByName = {};\n    this._basesByPrefix = {};\n    this._loadBase = options.loadBase || LOAD_BASE;\n    for (const base of options.bases) {\n      this.addBase(base);\n    }\n  }\n  addBase(base) {\n    if (this._basesByName[base.name] || this._basesByPrefix[base.prefix]) {\n      throw new Error(`Codec already exists for codec \"${ base.name }\"`);\n    }\n    this._basesByName[base.name] = base;\n    this._basesByPrefix[base.prefix] = base;\n  }\n  removeBase(base) {\n    delete this._basesByName[base.name];\n    delete this._basesByPrefix[base.prefix];\n  }\n  async getBase(nameOrPrefix) {\n    if (this._basesByName[nameOrPrefix]) {\n      return this._basesByName[nameOrPrefix];\n    }\n    if (this._basesByPrefix[nameOrPrefix]) {\n      return this._basesByPrefix[nameOrPrefix];\n    }\n    const base = await this._loadBase(nameOrPrefix);\n    if (this._basesByName[base.name] == null && this._basesByPrefix[base.prefix] == null) {\n      this.addBase(base);\n    }\n    return base;\n  }\n  listBases() {\n    return Object.values(this._basesByName);\n  }\n}"]},"metadata":{},"sourceType":"module"}