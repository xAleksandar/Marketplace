{"ast":null,"code":"const empty = new Uint8Array(0);\n\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');\n\nconst fromHex = hex => {\n  const hexes = hex.match(/../g);\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty;\n};\n\nconst equals = (aa, bb) => {\n  if (aa === bb) return true;\n\n  if (aa.byteLength !== bb.byteLength) {\n    return false;\n  }\n\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array') return o;\n  if (o instanceof ArrayBuffer) return new Uint8Array(o);\n\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n  }\n\n  throw new Error('Unknown type, must be binary type');\n};\n\nconst isBinary = o => o instanceof ArrayBuffer || ArrayBuffer.isView(o);\n\nconst fromString = str => new TextEncoder().encode(str);\n\nconst toString = b => new TextDecoder().decode(b);\n\nexport { equals, coerce, isBinary, fromHex, toHex, fromString, toString, empty };","map":{"version":3,"sources":["/home/alex/Documents/gitest/Marketplace/node_modules/multiformats/esm/src/bytes.js"],"names":["empty","Uint8Array","toHex","d","reduce","hex","byte","toString","padStart","fromHex","hexes","match","map","b","parseInt","equals","aa","bb","byteLength","ii","coerce","o","constructor","name","ArrayBuffer","isView","buffer","byteOffset","Error","isBinary","fromString","str","TextEncoder","encode","TextDecoder","decode"],"mappings":"AAAA,MAAMA,KAAK,GAAG,IAAIC,UAAJ,CAAe,CAAf,CAAd;;AACA,MAAMC,KAAK,GAAGC,CAAC,IAAIA,CAAC,CAACC,MAAF,CAAS,CAACC,GAAD,EAAMC,IAAN,KAAeD,GAAG,GAAGC,IAAI,CAACC,QAAL,CAAc,EAAd,EAAkBC,QAAlB,CAA2B,CAA3B,EAA8B,GAA9B,CAA9B,EAAkE,EAAlE,CAAnB;;AACA,MAAMC,OAAO,GAAGJ,GAAG,IAAI;AACrB,QAAMK,KAAK,GAAGL,GAAG,CAACM,KAAJ,CAAU,KAAV,CAAd;AACA,SAAOD,KAAK,GAAG,IAAIT,UAAJ,CAAeS,KAAK,CAACE,GAAN,CAAUC,CAAC,IAAIC,QAAQ,CAACD,CAAD,EAAI,EAAJ,CAAvB,CAAf,CAAH,GAAqDb,KAAjE;AACD,CAHD;;AAIA,MAAMe,MAAM,GAAG,CAACC,EAAD,EAAKC,EAAL,KAAY;AACzB,MAAID,EAAE,KAAKC,EAAX,EACE,OAAO,IAAP;;AACF,MAAID,EAAE,CAACE,UAAH,KAAkBD,EAAE,CAACC,UAAzB,EAAqC;AACnC,WAAO,KAAP;AACD;;AACD,OAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGH,EAAE,CAACE,UAAzB,EAAqCC,EAAE,EAAvC,EAA2C;AACzC,QAAIH,EAAE,CAACG,EAAD,CAAF,KAAWF,EAAE,CAACE,EAAD,CAAjB,EAAuB;AACrB,aAAO,KAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD,CAZD;;AAaA,MAAMC,MAAM,GAAGC,CAAC,IAAI;AAClB,MAAIA,CAAC,YAAYpB,UAAb,IAA2BoB,CAAC,CAACC,WAAF,CAAcC,IAAd,KAAuB,YAAtD,EACE,OAAOF,CAAP;AACF,MAAIA,CAAC,YAAYG,WAAjB,EACE,OAAO,IAAIvB,UAAJ,CAAeoB,CAAf,CAAP;;AACF,MAAIG,WAAW,CAACC,MAAZ,CAAmBJ,CAAnB,CAAJ,EAA2B;AACzB,WAAO,IAAIpB,UAAJ,CAAeoB,CAAC,CAACK,MAAjB,EAAyBL,CAAC,CAACM,UAA3B,EAAuCN,CAAC,CAACH,UAAzC,CAAP;AACD;;AACD,QAAM,IAAIU,KAAJ,CAAU,mCAAV,CAAN;AACD,CATD;;AAUA,MAAMC,QAAQ,GAAGR,CAAC,IAAIA,CAAC,YAAYG,WAAb,IAA4BA,WAAW,CAACC,MAAZ,CAAmBJ,CAAnB,CAAlD;;AACA,MAAMS,UAAU,GAAGC,GAAG,IAAI,IAAIC,WAAJ,GAAkBC,MAAlB,CAAyBF,GAAzB,CAA1B;;AACA,MAAMxB,QAAQ,GAAGM,CAAC,IAAI,IAAIqB,WAAJ,GAAkBC,MAAlB,CAAyBtB,CAAzB,CAAtB;;AACA,SACEE,MADF,EAEEK,MAFF,EAGES,QAHF,EAIEpB,OAJF,EAKEP,KALF,EAME4B,UANF,EAOEvB,QAPF,EAQEP,KARF","sourcesContent":["const empty = new Uint8Array(0);\nconst toHex = d => d.reduce((hex, byte) => hex + byte.toString(16).padStart(2, '0'), '');\nconst fromHex = hex => {\n  const hexes = hex.match(/../g);\n  return hexes ? new Uint8Array(hexes.map(b => parseInt(b, 16))) : empty;\n};\nconst equals = (aa, bb) => {\n  if (aa === bb)\n    return true;\n  if (aa.byteLength !== bb.byteLength) {\n    return false;\n  }\n  for (let ii = 0; ii < aa.byteLength; ii++) {\n    if (aa[ii] !== bb[ii]) {\n      return false;\n    }\n  }\n  return true;\n};\nconst coerce = o => {\n  if (o instanceof Uint8Array && o.constructor.name === 'Uint8Array')\n    return o;\n  if (o instanceof ArrayBuffer)\n    return new Uint8Array(o);\n  if (ArrayBuffer.isView(o)) {\n    return new Uint8Array(o.buffer, o.byteOffset, o.byteLength);\n  }\n  throw new Error('Unknown type, must be binary type');\n};\nconst isBinary = o => o instanceof ArrayBuffer || ArrayBuffer.isView(o);\nconst fromString = str => new TextEncoder().encode(str);\nconst toString = b => new TextDecoder().decode(b);\nexport {\n  equals,\n  coerce,\n  isBinary,\n  fromHex,\n  toHex,\n  fromString,\n  toString,\n  empty\n};"]},"metadata":{},"sourceType":"module"}