{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createFlush = configure(api => {\n  async function flush(path) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!path || typeof path !== 'string') {\n      throw new Error('ipfs.files.flush requires a path');\n    }\n\n    const res = await api.post('files/flush', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    });\n    const data = await res.json();\n    return CID.parse(data.Cid);\n  }\n\n  return flush;\n});","map":{"version":3,"sources":["/home/alex/Documents/gitest/Marketplace/node_modules/ipfs-http-client/esm/src/files/flush.js"],"names":["CID","configure","toUrlSearchParams","createFlush","api","flush","path","options","Error","res","post","signal","searchParams","arg","headers","data","json","parse","Cid"],"mappings":"AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,OAAO,MAAMC,WAAW,GAAGF,SAAS,CAACG,GAAG,IAAI;AAC1C,iBAAeC,KAAf,CAAqBC,IAArB,EAAyC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AACvC,QAAI,CAACD,IAAD,IAAS,OAAOA,IAAP,KAAgB,QAA7B,EAAuC;AACrC,YAAM,IAAIE,KAAJ,CAAU,kCAAV,CAAN;AACD;;AACD,UAAMC,GAAG,GAAG,MAAML,GAAG,CAACM,IAAJ,CAAS,aAAT,EAAwB;AACxCC,MAAAA,MAAM,EAAEJ,OAAO,CAACI,MADwB;AAExCC,MAAAA,YAAY,EAAEV,iBAAiB,CAAC;AAC9BW,QAAAA,GAAG,EAAEP,IADyB;AAE9B,WAAGC;AAF2B,OAAD,CAFS;AAMxCO,MAAAA,OAAO,EAAEP,OAAO,CAACO;AANuB,KAAxB,CAAlB;AAQA,UAAMC,IAAI,GAAG,MAAMN,GAAG,CAACO,IAAJ,EAAnB;AACA,WAAOhB,GAAG,CAACiB,KAAJ,CAAUF,IAAI,CAACG,GAAf,CAAP;AACD;;AACD,SAAOb,KAAP;AACD,CAjBmC,CAA7B","sourcesContent":["import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createFlush = configure(api => {\n  async function flush(path, options = {}) {\n    if (!path || typeof path !== 'string') {\n      throw new Error('ipfs.files.flush requires a path');\n    }\n    const res = await api.post('files/flush', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: path,\n        ...options\n      }),\n      headers: options.headers\n    });\n    const data = await res.json();\n    return CID.parse(data.Cid);\n  }\n  return flush;\n});"]},"metadata":{},"sourceType":"module"}