{"ast":null,"code":"const textDecoder = new TextDecoder();\n\nfunction decodeVarint(bytes, offset) {\n  let v = 0;\n\n  for (let shift = 0;; shift += 7) {\n    if (shift >= 64) {\n      throw new Error('protobuf: varint overflow');\n    }\n\n    if (offset >= bytes.length) {\n      throw new Error('protobuf: unexpected end of data');\n    }\n\n    const b = bytes[offset++];\n    v += shift < 28 ? (b & 127) << shift : (b & 127) * 2 ** shift;\n\n    if (b < 128) {\n      break;\n    }\n  }\n\n  return [v, offset];\n}\n\nfunction decodeBytes(bytes, offset) {\n  let byteLen;\n  [byteLen, offset] = decodeVarint(bytes, offset);\n  const postOffset = offset + byteLen;\n\n  if (byteLen < 0 || postOffset < 0) {\n    throw new Error('protobuf: invalid length');\n  }\n\n  if (postOffset > bytes.length) {\n    throw new Error('protobuf: unexpected end of data');\n  }\n\n  return [bytes.subarray(offset, postOffset), postOffset];\n}\n\nfunction decodeKey(bytes, index) {\n  let wire;\n  [wire, index] = decodeVarint(bytes, index);\n  return [wire & 7, wire >> 3, index];\n}\n\nfunction decodeLink(bytes) {\n  const link = {};\n  const l = bytes.length;\n  let index = 0;\n\n  while (index < l) {\n    let wireType, fieldNum;\n    [wireType, fieldNum, index] = decodeKey(bytes, index);\n\n    if (fieldNum === 1) {\n      if (link.Hash) {\n        throw new Error('protobuf: (PBLink) duplicate Hash section');\n      }\n\n      if (wireType !== 2) {\n        throw new Error(`protobuf: (PBLink) wrong wireType (${wireType}) for Hash`);\n      }\n\n      if (link.Name !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Name before Hash');\n      }\n\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Tsize before Hash');\n      }\n\n      ;\n      [link.Hash, index] = decodeBytes(bytes, index);\n    } else if (fieldNum === 2) {\n      if (link.Name !== undefined) {\n        throw new Error('protobuf: (PBLink) duplicate Name section');\n      }\n\n      if (wireType !== 2) {\n        throw new Error(`protobuf: (PBLink) wrong wireType (${wireType}) for Name`);\n      }\n\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Tsize before Name');\n      }\n\n      let byts;\n      [byts, index] = decodeBytes(bytes, index);\n      link.Name = textDecoder.decode(byts);\n    } else if (fieldNum === 3) {\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) duplicate Tsize section');\n      }\n\n      if (wireType !== 0) {\n        throw new Error(`protobuf: (PBLink) wrong wireType (${wireType}) for Tsize`);\n      }\n\n      ;\n      [link.Tsize, index] = decodeVarint(bytes, index);\n    } else {\n      throw new Error(`protobuf: (PBLink) invalid fieldNumber, expected 1, 2 or 3, got ${fieldNum}`);\n    }\n  }\n\n  if (index > l) {\n    throw new Error('protobuf: (PBLink) unexpected end of data');\n  }\n\n  return link;\n}\n\nexport function decodeNode(bytes) {\n  const l = bytes.length;\n  let index = 0;\n  let links;\n  let linksBeforeData = false;\n  let data;\n\n  while (index < l) {\n    let wireType, fieldNum;\n    [wireType, fieldNum, index] = decodeKey(bytes, index);\n\n    if (wireType !== 2) {\n      throw new Error(`protobuf: (PBNode) invalid wireType, expected 2, got ${wireType}`);\n    }\n\n    if (fieldNum === 1) {\n      if (data) {\n        throw new Error('protobuf: (PBNode) duplicate Data section');\n      }\n\n      ;\n      [data, index] = decodeBytes(bytes, index);\n\n      if (links) {\n        linksBeforeData = true;\n      }\n    } else if (fieldNum === 2) {\n      if (linksBeforeData) {\n        throw new Error('protobuf: (PBNode) duplicate Links section');\n      } else if (!links) {\n        links = [];\n      }\n\n      let byts;\n      [byts, index] = decodeBytes(bytes, index);\n      links.push(decodeLink(byts));\n    } else {\n      throw new Error(`protobuf: (PBNode) invalid fieldNumber, expected 1 or 2, got ${fieldNum}`);\n    }\n  }\n\n  if (index > l) {\n    throw new Error('protobuf: (PBNode) unexpected end of data');\n  }\n\n  const node = {};\n\n  if (data) {\n    node.Data = data;\n  }\n\n  node.Links = links || [];\n  return node;\n}","map":{"version":3,"sources":["/home/alex/Documents/gitest/Marketplace/node_modules/@ipld/dag-pb/esm/src/pb-decode.js"],"names":["textDecoder","TextDecoder","decodeVarint","bytes","offset","v","shift","Error","length","b","decodeBytes","byteLen","postOffset","subarray","decodeKey","index","wire","decodeLink","link","l","wireType","fieldNum","Hash","Name","undefined","Tsize","byts","decode","decodeNode","links","linksBeforeData","data","push","node","Data","Links"],"mappings":"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","sourcesContent":["const textDecoder = new TextDecoder();\nfunction decodeVarint(bytes, offset) {\n  let v = 0;\n  for (let shift = 0;; shift += 7) {\n    if (shift >= 64) {\n      throw new Error('protobuf: varint overflow');\n    }\n    if (offset >= bytes.length) {\n      throw new Error('protobuf: unexpected end of data');\n    }\n    const b = bytes[offset++];\n    v += shift < 28 ? (b & 127) << shift : (b & 127) * 2 ** shift;\n    if (b < 128) {\n      break;\n    }\n  }\n  return [\n    v,\n    offset\n  ];\n}\nfunction decodeBytes(bytes, offset) {\n  let byteLen;\n  [byteLen, offset] = decodeVarint(bytes, offset);\n  const postOffset = offset + byteLen;\n  if (byteLen < 0 || postOffset < 0) {\n    throw new Error('protobuf: invalid length');\n  }\n  if (postOffset > bytes.length) {\n    throw new Error('protobuf: unexpected end of data');\n  }\n  return [\n    bytes.subarray(offset, postOffset),\n    postOffset\n  ];\n}\nfunction decodeKey(bytes, index) {\n  let wire;\n  [wire, index] = decodeVarint(bytes, index);\n  return [\n    wire & 7,\n    wire >> 3,\n    index\n  ];\n}\nfunction decodeLink(bytes) {\n  const link = {};\n  const l = bytes.length;\n  let index = 0;\n  while (index < l) {\n    let wireType, fieldNum;\n    [wireType, fieldNum, index] = decodeKey(bytes, index);\n    if (fieldNum === 1) {\n      if (link.Hash) {\n        throw new Error('protobuf: (PBLink) duplicate Hash section');\n      }\n      if (wireType !== 2) {\n        throw new Error(`protobuf: (PBLink) wrong wireType (${ wireType }) for Hash`);\n      }\n      if (link.Name !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Name before Hash');\n      }\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Tsize before Hash');\n      }\n      ;\n      [link.Hash, index] = decodeBytes(bytes, index);\n    } else if (fieldNum === 2) {\n      if (link.Name !== undefined) {\n        throw new Error('protobuf: (PBLink) duplicate Name section');\n      }\n      if (wireType !== 2) {\n        throw new Error(`protobuf: (PBLink) wrong wireType (${ wireType }) for Name`);\n      }\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) invalid order, found Tsize before Name');\n      }\n      let byts;\n      [byts, index] = decodeBytes(bytes, index);\n      link.Name = textDecoder.decode(byts);\n    } else if (fieldNum === 3) {\n      if (link.Tsize !== undefined) {\n        throw new Error('protobuf: (PBLink) duplicate Tsize section');\n      }\n      if (wireType !== 0) {\n        throw new Error(`protobuf: (PBLink) wrong wireType (${ wireType }) for Tsize`);\n      }\n      ;\n      [link.Tsize, index] = decodeVarint(bytes, index);\n    } else {\n      throw new Error(`protobuf: (PBLink) invalid fieldNumber, expected 1, 2 or 3, got ${ fieldNum }`);\n    }\n  }\n  if (index > l) {\n    throw new Error('protobuf: (PBLink) unexpected end of data');\n  }\n  return link;\n}\nexport function decodeNode(bytes) {\n  const l = bytes.length;\n  let index = 0;\n  let links;\n  let linksBeforeData = false;\n  let data;\n  while (index < l) {\n    let wireType, fieldNum;\n    [wireType, fieldNum, index] = decodeKey(bytes, index);\n    if (wireType !== 2) {\n      throw new Error(`protobuf: (PBNode) invalid wireType, expected 2, got ${ wireType }`);\n    }\n    if (fieldNum === 1) {\n      if (data) {\n        throw new Error('protobuf: (PBNode) duplicate Data section');\n      }\n      ;\n      [data, index] = decodeBytes(bytes, index);\n      if (links) {\n        linksBeforeData = true;\n      }\n    } else if (fieldNum === 2) {\n      if (linksBeforeData) {\n        throw new Error('protobuf: (PBNode) duplicate Links section');\n      } else if (!links) {\n        links = [];\n      }\n      let byts;\n      [byts, index] = decodeBytes(bytes, index);\n      links.push(decodeLink(byts));\n    } else {\n      throw new Error(`protobuf: (PBNode) invalid fieldNumber, expected 1 or 2, got ${ fieldNum }`);\n    }\n  }\n  if (index > l) {\n    throw new Error('protobuf: (PBNode) unexpected end of data');\n  }\n  const node = {};\n  if (data) {\n    node.Data = data;\n  }\n  node.Links = links || [];\n  return node;\n}"]},"metadata":{},"sourceType":"module"}