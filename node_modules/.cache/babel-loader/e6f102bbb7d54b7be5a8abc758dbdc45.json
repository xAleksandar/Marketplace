{"ast":null,"code":"var _jsxFileName = \"/home/alex/Documents/gitest/Marketplace/src/Home.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { ethers } from \"ethers\";\nimport { Row, Form, Button, Card } from 'react-bootstrap';\nimport { create as ipfsHttpClient } from 'ipfs-http-client';\nimport HomeItem from './components/HomeItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0');\n\nconst Home = _ref => {\n  _s();\n\n  let {\n    marketplace,\n    account,\n    NFTAbi,\n    signer\n  } = _ref;\n  const [myitems, setMyitems] = useState([]);\n  useEffect(() => {\n    async function fetchItems() {\n      const totalmarketitems = (await marketplace.lengthItems()).toString();\n      let items = [];\n\n      for (let i = 0; i <= totalmarketitems; i++) {\n        let nft = await marketplace.items(i);\n\n        if (nft.forSell == true) {\n          let NFTcontract = new ethers.Contract(nft.nft, NFTAbi.abi, signer);\n          let nftname = await NFTcontract.name();\n          let uri = await NFTcontract.tokenURI(nft.tokenId.toString());\n          let item = {\n            name: nftname + \" #\" + nft.tokenId.toString(),\n            collection: nft.nft,\n            tokenid: nft.tokenId,\n            price: ethers.utils.formatEther(nft.price),\n            image: uri\n          };\n          items.push(item);\n        }\n      }\n\n      setMyitems(items);\n    }\n\n    fetchItems();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: myitems.map(x => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(HomeItem, {\n        image: x.image,\n        tokenid: x.tokenid,\n        price: x.price,\n        collection: x.collection,\n        marketplace: marketplace,\n        name: x.name,\n        signer: signer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 42\n      }, this)\n    }, x.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 25\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"+mH3Gy0ROYlCk01qVCDxVO/kFUU=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/home/alex/Documents/gitest/Marketplace/src/Home.js"],"names":["useEffect","useState","ethers","Row","Form","Button","Card","create","ipfsHttpClient","HomeItem","client","Home","marketplace","account","NFTAbi","signer","myitems","setMyitems","fetchItems","totalmarketitems","lengthItems","toString","items","i","nft","forSell","NFTcontract","Contract","abi","nftname","name","uri","tokenURI","tokenId","item","collection","tokenid","price","utils","formatEther","image","push","map","x"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,MAApB,EAA4BC,IAA5B,QAAwC,iBAAxC;AACA,SAASC,MAAM,IAAIC,cAAnB,QAAyC,kBAAzC;AACA,OAAOC,QAAP,MAAqB,uBAArB;;AAEA,MAAMC,MAAM,GAAGF,cAAc,CAAC,oCAAD,CAA7B;;AAEA,MAAMG,IAAI,GAAG,QAA8C;AAAA;;AAAA,MAA7C;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,OAAf;AAAwBC,IAAAA,MAAxB;AAAgCC,IAAAA;AAAhC,GAA6C;AAEzD,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAAC,EAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AAChB,mBAAekB,UAAf,GAA4B;AAE1B,YAAMC,gBAAgB,GAAG,CAAC,MAAMP,WAAW,CAACQ,WAAZ,EAAP,EAAkCC,QAAlC,EAAzB;AACA,UAAIC,KAAK,GAAG,EAAZ;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAGJ,gBAApB,EAAsCI,CAAC,EAAvC,EAA2C;AACzC,YAAIC,GAAG,GAAG,MAAMZ,WAAW,CAACU,KAAZ,CAAkBC,CAAlB,CAAhB;;AAEA,YAAIC,GAAG,CAACC,OAAJ,IAAe,IAAnB,EAAyB;AACvB,cAAIC,WAAW,GAAG,IAAIxB,MAAM,CAACyB,QAAX,CAAoBH,GAAG,CAACA,GAAxB,EAA6BV,MAAM,CAACc,GAApC,EAAyCb,MAAzC,CAAlB;AACA,cAAIc,OAAO,GAAG,MAAMH,WAAW,CAACI,IAAZ,EAApB;AACA,cAAIC,GAAG,GAAG,MAAML,WAAW,CAACM,QAAZ,CAAqBR,GAAG,CAACS,OAAJ,CAAYZ,QAAZ,EAArB,CAAhB;AAEA,cAAIa,IAAI,GAAG;AACTJ,YAAAA,IAAI,EAAED,OAAO,GAAG,IAAV,GAAiBL,GAAG,CAACS,OAAJ,CAAYZ,QAAZ,EADd;AAETc,YAAAA,UAAU,EAAEX,GAAG,CAACA,GAFP;AAGTY,YAAAA,OAAO,EAAEZ,GAAG,CAACS,OAHJ;AAITI,YAAAA,KAAK,EAAEnC,MAAM,CAACoC,KAAP,CAAaC,WAAb,CAAyBf,GAAG,CAACa,KAA7B,CAJE;AAKTG,YAAAA,KAAK,EAAET;AALE,WAAX;AAOAT,UAAAA,KAAK,CAACmB,IAAN,CAAWP,IAAX;AACD;AAEF;;AACDjB,MAAAA,UAAU,CAACK,KAAD,CAAV;AACD;;AAEHJ,IAAAA,UAAU;AAAG,GA5BF,EA4BI,EA5BJ,CAAT;AA8BA,sBACE;AAAA,cACGF,OAAO,CAAC0B,GAAR,CAAYC,CAAC,iBAAI;AAAA,6BAAiB,QAAC,QAAD;AAAU,QAAA,KAAK,EAAEA,CAAC,CAACH,KAAnB;AAA0B,QAAA,OAAO,EAAEG,CAAC,CAACP,OAArC;AAA8C,QAAA,KAAK,EAAEO,CAAC,CAACN,KAAvD;AAA8D,QAAA,UAAU,EAAEM,CAAC,CAACR,UAA5E;AAAwF,QAAA,WAAW,EAAEvB,WAArG;AAAkH,QAAA,IAAI,EAAE+B,CAAC,CAACb,IAA1H;AAAgI,QAAA,MAAM,EAAEf;AAAxI;AAAA;AAAA;AAAA;AAAA;AAAjB,OAAS4B,CAAC,CAACb,IAAX;AAAA;AAAA;AAAA;AAAA,YAAjB;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAvCD;;GAAMnB,I;;KAAAA,I;AAyCN,eAAeA,IAAf","sourcesContent":["import { useEffect, useState } from 'react'\nimport { ethers } from \"ethers\"\nimport { Row, Form, Button, Card } from 'react-bootstrap'\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\nimport HomeItem from './components/HomeItem'\n\nconst client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\n\nconst Home = ({ marketplace, account, NFTAbi, signer }) => {\n\n  const [myitems, setMyitems] = useState([])\n\n  useEffect(() => {\n  async function fetchItems() {\n\n    const totalmarketitems = (await marketplace.lengthItems()).toString()\n    let items = []\n\n    for (let i = 0; i <=totalmarketitems; i++) {\n      let nft = await marketplace.items(i)\n      \n      if (nft.forSell == true) {\n        let NFTcontract = new ethers.Contract(nft.nft, NFTAbi.abi, signer)\n        let nftname = await NFTcontract.name()\n        let uri = await NFTcontract.tokenURI(nft.tokenId.toString())\n        \n        let item = {\n          name: nftname + \" #\" + nft.tokenId.toString(),\n          collection: nft.nft,\n          tokenid: nft.tokenId,\n          price: ethers.utils.formatEther(nft.price),\n          image: uri\n        }\n        items.push(item)\n      }\n\n    }\n    setMyitems(items)\n  }\n  \nfetchItems()}, [])\n\n  return (\n    <div>\n      {myitems.map(x => <li key={x.name}><HomeItem image={x.image} tokenid={x.tokenid} price={x.price} collection={x.collection} marketplace={marketplace} name={x.name} signer={signer} /></li>)}\n    </div>\n  );\n}\n\nexport default Home"]},"metadata":{},"sourceType":"module"}