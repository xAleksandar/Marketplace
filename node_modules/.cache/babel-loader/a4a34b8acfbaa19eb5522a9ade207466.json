{"ast":null,"code":"import { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createSet = configure(api => {\n  const set = async function (key, value) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    if (typeof key !== 'string') {\n      throw new Error('Invalid key type');\n    }\n\n    const params = { ...options,\n      ...encodeParam(key, value)\n    };\n    const res = await api.post('config', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(params),\n      headers: options.headers\n    });\n    await res.text();\n  };\n\n  return set;\n});\n\nconst encodeParam = (key, value) => {\n  switch (typeof value) {\n    case 'boolean':\n      return {\n        arg: [key, value.toString()],\n        bool: true\n      };\n\n    case 'string':\n      return {\n        arg: [key, value]\n      };\n\n    default:\n      return {\n        arg: [key, JSON.stringify(value)],\n        json: true\n      };\n  }\n};","map":{"version":3,"sources":["/home/alex/Documents/gitest/Marketplace/node_modules/ipfs-http-client/esm/src/config/set.js"],"names":["configure","toUrlSearchParams","createSet","api","set","key","value","options","Error","params","encodeParam","res","post","signal","searchParams","headers","text","arg","toString","bool","JSON","stringify","json"],"mappings":"AAAA,SAASA,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,OAAO,MAAMC,SAAS,GAAGF,SAAS,CAACG,GAAG,IAAI;AACxC,QAAMC,GAAG,GAAG,gBAAOC,GAAP,EAAYC,KAAZ,EAAoC;AAAA,QAAjBC,OAAiB,uEAAP,EAAO;;AAC9C,QAAI,OAAOF,GAAP,KAAe,QAAnB,EAA6B;AAC3B,YAAM,IAAIG,KAAJ,CAAU,kBAAV,CAAN;AACD;;AACD,UAAMC,MAAM,GAAG,EACb,GAAGF,OADU;AAEb,SAAGG,WAAW,CAACL,GAAD,EAAMC,KAAN;AAFD,KAAf;AAIA,UAAMK,GAAG,GAAG,MAAMR,GAAG,CAACS,IAAJ,CAAS,QAAT,EAAmB;AACnCC,MAAAA,MAAM,EAAEN,OAAO,CAACM,MADmB;AAEnCC,MAAAA,YAAY,EAAEb,iBAAiB,CAACQ,MAAD,CAFI;AAGnCM,MAAAA,OAAO,EAAER,OAAO,CAACQ;AAHkB,KAAnB,CAAlB;AAKA,UAAMJ,GAAG,CAACK,IAAJ,EAAN;AACD,GAdD;;AAeA,SAAOZ,GAAP;AACD,CAjBiC,CAA3B;;AAkBP,MAAMM,WAAW,GAAG,CAACL,GAAD,EAAMC,KAAN,KAAgB;AAClC,UAAQ,OAAOA,KAAf;AACA,SAAK,SAAL;AACE,aAAO;AACLW,QAAAA,GAAG,EAAE,CACHZ,GADG,EAEHC,KAAK,CAACY,QAAN,EAFG,CADA;AAKLC,QAAAA,IAAI,EAAE;AALD,OAAP;;AAOF,SAAK,QAAL;AACE,aAAO;AACLF,QAAAA,GAAG,EAAE,CACHZ,GADG,EAEHC,KAFG;AADA,OAAP;;AAMF;AACE,aAAO;AACLW,QAAAA,GAAG,EAAE,CACHZ,GADG,EAEHe,IAAI,CAACC,SAAL,CAAef,KAAf,CAFG,CADA;AAKLgB,QAAAA,IAAI,EAAE;AALD,OAAP;AAjBF;AAyBD,CA1BD","sourcesContent":["import { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createSet = configure(api => {\n  const set = async (key, value, options = {}) => {\n    if (typeof key !== 'string') {\n      throw new Error('Invalid key type');\n    }\n    const params = {\n      ...options,\n      ...encodeParam(key, value)\n    };\n    const res = await api.post('config', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(params),\n      headers: options.headers\n    });\n    await res.text();\n  };\n  return set;\n});\nconst encodeParam = (key, value) => {\n  switch (typeof value) {\n  case 'boolean':\n    return {\n      arg: [\n        key,\n        value.toString()\n      ],\n      bool: true\n    };\n  case 'string':\n    return {\n      arg: [\n        key,\n        value\n      ]\n    };\n  default:\n    return {\n      arg: [\n        key,\n        JSON.stringify(value)\n      ],\n      json: true\n    };\n  }\n};"]},"metadata":{},"sourceType":"module"}