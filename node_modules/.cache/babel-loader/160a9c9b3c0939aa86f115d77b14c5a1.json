{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createAddAll = configure(api => {\n  async function* addAll(source) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    for await (const {\n      path,\n      recursive,\n      metadata\n    } of normaliseInput(source)) {\n      const res = await api.post('pin/add', {\n        signal: options.signal,\n        searchParams: toUrlSearchParams({ ...options,\n          arg: path,\n          recursive,\n          metadata: metadata ? JSON.stringify(metadata) : undefined,\n          stream: true\n        }),\n        headers: options.headers\n      });\n\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) {\n          for (const cid of pin.Pins) {\n            yield CID.parse(cid);\n          }\n\n          continue;\n        }\n\n        yield CID.parse(pin);\n      }\n    }\n  }\n\n  return addAll;\n});","map":{"version":3,"sources":["/home/alex/Documents/gitest/Marketplace/node_modules/ipfs-http-client/esm/src/pin/add-all.js"],"names":["CID","configure","normaliseInput","toUrlSearchParams","createAddAll","api","addAll","source","options","path","recursive","metadata","res","post","signal","searchParams","arg","JSON","stringify","undefined","stream","headers","pin","ndjson","Pins","cid","parse"],"mappings":"AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,cAAT,QAA+B,sCAA/B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,OAAO,MAAMC,YAAY,GAAGH,SAAS,CAACI,GAAG,IAAI;AAC3C,kBAAgBC,MAAhB,CAAuBC,MAAvB,EAA6C;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAC3C,eAAW,MAAM;AAACC,MAAAA,IAAD;AAAOC,MAAAA,SAAP;AAAkBC,MAAAA;AAAlB,KAAjB,IAAgDT,cAAc,CAACK,MAAD,CAA9D,EAAwE;AACtE,YAAMK,GAAG,GAAG,MAAMP,GAAG,CAACQ,IAAJ,CAAS,SAAT,EAAoB;AACpCC,QAAAA,MAAM,EAAEN,OAAO,CAACM,MADoB;AAEpCC,QAAAA,YAAY,EAAEZ,iBAAiB,CAAC,EAC9B,GAAGK,OAD2B;AAE9BQ,UAAAA,GAAG,EAAEP,IAFyB;AAG9BC,UAAAA,SAH8B;AAI9BC,UAAAA,QAAQ,EAAEA,QAAQ,GAAGM,IAAI,CAACC,SAAL,CAAeP,QAAf,CAAH,GAA8BQ,SAJlB;AAK9BC,UAAAA,MAAM,EAAE;AALsB,SAAD,CAFK;AASpCC,QAAAA,OAAO,EAAEb,OAAO,CAACa;AATmB,OAApB,CAAlB;;AAWA,iBAAW,MAAMC,GAAjB,IAAwBV,GAAG,CAACW,MAAJ,EAAxB,EAAsC;AACpC,YAAID,GAAG,CAACE,IAAR,EAAc;AACZ,eAAK,MAAMC,GAAX,IAAkBH,GAAG,CAACE,IAAtB,EAA4B;AAC1B,kBAAMxB,GAAG,CAAC0B,KAAJ,CAAUD,GAAV,CAAN;AACD;;AACD;AACD;;AACD,cAAMzB,GAAG,CAAC0B,KAAJ,CAAUJ,GAAV,CAAN;AACD;AACF;AACF;;AACD,SAAOhB,MAAP;AACD,CA1BoC,CAA9B","sourcesContent":["import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { normaliseInput } from 'ipfs-core-utils/pins/normalise-input';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createAddAll = configure(api => {\n  async function* addAll(source, options = {}) {\n    for await (const {path, recursive, metadata} of normaliseInput(source)) {\n      const res = await api.post('pin/add', {\n        signal: options.signal,\n        searchParams: toUrlSearchParams({\n          ...options,\n          arg: path,\n          recursive,\n          metadata: metadata ? JSON.stringify(metadata) : undefined,\n          stream: true\n        }),\n        headers: options.headers\n      });\n      for await (const pin of res.ndjson()) {\n        if (pin.Pins) {\n          for (const cid of pin.Pins) {\n            yield CID.parse(cid);\n          }\n          continue;\n        }\n        yield CID.parse(pin);\n      }\n    }\n  }\n  return addAll;\n});"]},"metadata":{},"sourceType":"module"}