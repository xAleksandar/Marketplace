{"ast":null,"code":"import errCode from 'err-code';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport browserStreamToIt from 'browser-readablestream-to-it';\nimport blobToIt from 'blob-to-it';\nimport itPeekable from 'it-peekable';\nimport all from 'it-all';\nimport map from 'it-map';\nimport { isBytes, isReadableStream, isBlob } from './utils.js';\n\nasync function* toAsyncIterable(thing) {\n  yield thing;\n}\n\nexport async function normaliseContent(input) {\n  if (isBytes(input)) {\n    return toAsyncIterable(toBytes(input));\n  }\n\n  if (typeof input === 'string' || input instanceof String) {\n    return toAsyncIterable(toBytes(input.toString()));\n  }\n\n  if (isBlob(input)) {\n    return blobToIt(input);\n  }\n\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input);\n  }\n\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable(input);\n    const {\n      value,\n      done\n    } = await peekable.peek();\n\n    if (done) {\n      return toAsyncIterable(new Uint8Array(0));\n    }\n\n    peekable.push(value);\n\n    if (Number.isInteger(value)) {\n      return toAsyncIterable(Uint8Array.from(await all(peekable)));\n    }\n\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      return map(peekable, toBytes);\n    }\n  }\n\n  throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT');\n}\n\nfunction toBytes(chunk) {\n  if (chunk instanceof Uint8Array) {\n    return chunk;\n  }\n\n  if (ArrayBuffer.isView(chunk)) {\n    return new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.byteLength);\n  }\n\n  if (chunk instanceof ArrayBuffer) {\n    return new Uint8Array(chunk);\n  }\n\n  if (Array.isArray(chunk)) {\n    return Uint8Array.from(chunk);\n  }\n\n  return uint8ArrayFromString(chunk.toString());\n}","map":{"version":3,"sources":["/home/alex/Documents/gitest/Marketplace/node_modules/ipfs-core-utils/esm/src/files/normalise-content.js"],"names":["errCode","fromString","uint8ArrayFromString","browserStreamToIt","blobToIt","itPeekable","all","map","isBytes","isReadableStream","isBlob","toAsyncIterable","thing","normaliseContent","input","toBytes","String","toString","Symbol","iterator","asyncIterator","peekable","value","done","peek","Uint8Array","push","Number","isInteger","from","Error","chunk","ArrayBuffer","isView","buffer","byteOffset","byteLength","Array","isArray"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,UAApB;AACA,SAASC,UAAU,IAAIC,oBAAvB,QAAmD,yBAAnD;AACA,OAAOC,iBAAP,MAA8B,8BAA9B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SACEC,OADF,EAEEC,gBAFF,EAGEC,MAHF,QAIO,YAJP;;AAKA,gBAAgBC,eAAhB,CAAgCC,KAAhC,EAAuC;AACrC,QAAMA,KAAN;AACD;;AACD,OAAO,eAAeC,gBAAf,CAAgCC,KAAhC,EAAuC;AAC5C,MAAIN,OAAO,CAACM,KAAD,CAAX,EAAoB;AAClB,WAAOH,eAAe,CAACI,OAAO,CAACD,KAAD,CAAR,CAAtB;AACD;;AACD,MAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,YAAYE,MAAlD,EAA0D;AACxD,WAAOL,eAAe,CAACI,OAAO,CAACD,KAAK,CAACG,QAAN,EAAD,CAAR,CAAtB;AACD;;AACD,MAAIP,MAAM,CAACI,KAAD,CAAV,EAAmB;AACjB,WAAOV,QAAQ,CAACU,KAAD,CAAf;AACD;;AACD,MAAIL,gBAAgB,CAACK,KAAD,CAApB,EAA6B;AAC3BA,IAAAA,KAAK,GAAGX,iBAAiB,CAACW,KAAD,CAAzB;AACD;;AACD,MAAII,MAAM,CAACC,QAAP,IAAmBL,KAAnB,IAA4BI,MAAM,CAACE,aAAP,IAAwBN,KAAxD,EAA+D;AAC7D,UAAMO,QAAQ,GAAGhB,UAAU,CAACS,KAAD,CAA3B;AACA,UAAM;AAACQ,MAAAA,KAAD;AAAQC,MAAAA;AAAR,QAAgB,MAAMF,QAAQ,CAACG,IAAT,EAA5B;;AACA,QAAID,IAAJ,EAAU;AACR,aAAOZ,eAAe,CAAC,IAAIc,UAAJ,CAAe,CAAf,CAAD,CAAtB;AACD;;AACDJ,IAAAA,QAAQ,CAACK,IAAT,CAAcJ,KAAd;;AACA,QAAIK,MAAM,CAACC,SAAP,CAAiBN,KAAjB,CAAJ,EAA6B;AAC3B,aAAOX,eAAe,CAACc,UAAU,CAACI,IAAX,CAAgB,MAAMvB,GAAG,CAACe,QAAD,CAAzB,CAAD,CAAtB;AACD;;AACD,QAAIb,OAAO,CAACc,KAAD,CAAP,IAAkB,OAAOA,KAAP,KAAiB,QAAnC,IAA+CA,KAAK,YAAYN,MAApE,EAA4E;AAC1E,aAAOT,GAAG,CAACc,QAAD,EAAWN,OAAX,CAAV;AACD;AACF;;AACD,QAAMf,OAAO,CAAC,IAAI8B,KAAJ,CAAW,qBAAqBhB,KAAO,EAAvC,CAAD,EAA4C,sBAA5C,CAAb;AACD;;AACD,SAASC,OAAT,CAAiBgB,KAAjB,EAAwB;AACtB,MAAIA,KAAK,YAAYN,UAArB,EAAiC;AAC/B,WAAOM,KAAP;AACD;;AACD,MAAIC,WAAW,CAACC,MAAZ,CAAmBF,KAAnB,CAAJ,EAA+B;AAC7B,WAAO,IAAIN,UAAJ,CAAeM,KAAK,CAACG,MAArB,EAA6BH,KAAK,CAACI,UAAnC,EAA+CJ,KAAK,CAACK,UAArD,CAAP;AACD;;AACD,MAAIL,KAAK,YAAYC,WAArB,EAAkC;AAChC,WAAO,IAAIP,UAAJ,CAAeM,KAAf,CAAP;AACD;;AACD,MAAIM,KAAK,CAACC,OAAN,CAAcP,KAAd,CAAJ,EAA0B;AACxB,WAAON,UAAU,CAACI,IAAX,CAAgBE,KAAhB,CAAP;AACD;;AACD,SAAO7B,oBAAoB,CAAC6B,KAAK,CAACd,QAAN,EAAD,CAA3B;AACD","sourcesContent":["import errCode from 'err-code';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport browserStreamToIt from 'browser-readablestream-to-it';\nimport blobToIt from 'blob-to-it';\nimport itPeekable from 'it-peekable';\nimport all from 'it-all';\nimport map from 'it-map';\nimport {\n  isBytes,\n  isReadableStream,\n  isBlob\n} from './utils.js';\nasync function* toAsyncIterable(thing) {\n  yield thing;\n}\nexport async function normaliseContent(input) {\n  if (isBytes(input)) {\n    return toAsyncIterable(toBytes(input));\n  }\n  if (typeof input === 'string' || input instanceof String) {\n    return toAsyncIterable(toBytes(input.toString()));\n  }\n  if (isBlob(input)) {\n    return blobToIt(input);\n  }\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input);\n  }\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable(input);\n    const {value, done} = await peekable.peek();\n    if (done) {\n      return toAsyncIterable(new Uint8Array(0));\n    }\n    peekable.push(value);\n    if (Number.isInteger(value)) {\n      return toAsyncIterable(Uint8Array.from(await all(peekable)));\n    }\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      return map(peekable, toBytes);\n    }\n  }\n  throw errCode(new Error(`Unexpected input: ${ input }`), 'ERR_UNEXPECTED_INPUT');\n}\nfunction toBytes(chunk) {\n  if (chunk instanceof Uint8Array) {\n    return chunk;\n  }\n  if (ArrayBuffer.isView(chunk)) {\n    return new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.byteLength);\n  }\n  if (chunk instanceof ArrayBuffer) {\n    return new Uint8Array(chunk);\n  }\n  if (Array.isArray(chunk)) {\n    return Uint8Array.from(chunk);\n  }\n  return uint8ArrayFromString(chunk.toString());\n}"]},"metadata":{},"sourceType":"module"}