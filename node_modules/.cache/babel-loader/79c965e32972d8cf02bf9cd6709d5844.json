{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createResolve = configure(api => {\n  const resolve = async function (ipfsPath) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const res = await api.post('dag/resolve', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${ipfsPath}${options.path ? `/${options.path}`.replace(/\\/[/]+/g, '/') : ''}`,\n        ...options\n      }),\n      headers: options.headers\n    });\n    const data = await res.json();\n    return {\n      cid: CID.parse(data.Cid['/']),\n      remainderPath: data.RemPath\n    };\n  };\n\n  return resolve;\n});","map":{"version":3,"sources":["/home/alex/Documents/gitest/Marketplace/node_modules/ipfs-http-client/esm/src/dag/resolve.js"],"names":["CID","configure","toUrlSearchParams","createResolve","api","resolve","ipfsPath","options","res","post","signal","searchParams","arg","path","replace","headers","data","json","cid","parse","Cid","remainderPath","RemPath"],"mappings":"AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,OAAO,MAAMC,aAAa,GAAGF,SAAS,CAACG,GAAG,IAAI;AAC5C,QAAMC,OAAO,GAAG,gBAAOC,QAAP,EAAkC;AAAA,QAAjBC,OAAiB,uEAAP,EAAO;AAChD,UAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,aAAT,EAAwB;AACxCC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MADwB;AAExCC,MAAAA,YAAY,EAAET,iBAAiB,CAAC;AAC9BU,QAAAA,GAAG,EAAG,GAAGN,QAAU,GAAGC,OAAO,CAACM,IAAR,GAAgB,IAAIN,OAAO,CAACM,IAAM,EAAnB,CAAqBC,OAArB,CAA6B,SAA7B,EAAwC,GAAxC,CAAf,GAA8D,EAAI,EAD1D;AAE9B,WAAGP;AAF2B,OAAD,CAFS;AAMxCQ,MAAAA,OAAO,EAAER,OAAO,CAACQ;AANuB,KAAxB,CAAlB;AAQA,UAAMC,IAAI,GAAG,MAAMR,GAAG,CAACS,IAAJ,EAAnB;AACA,WAAO;AACLC,MAAAA,GAAG,EAAElB,GAAG,CAACmB,KAAJ,CAAUH,IAAI,CAACI,GAAL,CAAS,GAAT,CAAV,CADA;AAELC,MAAAA,aAAa,EAAEL,IAAI,CAACM;AAFf,KAAP;AAID,GAdD;;AAeA,SAAOjB,OAAP;AACD,CAjBqC,CAA/B","sourcesContent":["import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createResolve = configure(api => {\n  const resolve = async (ipfsPath, options = {}) => {\n    const res = await api.post('dag/resolve', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: `${ ipfsPath }${ options.path ? `/${ options.path }`.replace(/\\/[/]+/g, '/') : '' }`,\n        ...options\n      }),\n      headers: options.headers\n    });\n    const data = await res.json();\n    return {\n      cid: CID.parse(data.Cid['/']),\n      remainderPath: data.RemPath\n    };\n  };\n  return resolve;\n});"]},"metadata":{},"sourceType":"module"}