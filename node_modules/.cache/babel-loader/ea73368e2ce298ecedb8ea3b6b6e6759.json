{"ast":null,"code":"import errCode from 'err-code';\nimport browserStreamToIt from 'browser-readablestream-to-it';\nimport itPeekable from 'it-peekable';\nimport { isBytes, isBlob, isReadableStream, isFileObject } from './utils.js';\nimport { parseMtime, parseMode } from 'ipfs-unixfs';\nexport async function* normaliseCandidateSingle(input, normaliseContent) {\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT');\n  }\n\n  if (typeof input === 'string' || input instanceof String) {\n    yield toFileObject(input.toString(), normaliseContent);\n    return;\n  }\n\n  if (isBytes(input) || isBlob(input)) {\n    yield toFileObject(input, normaliseContent);\n    return;\n  }\n\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input);\n  }\n\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable(input);\n    const {\n      value,\n      done\n    } = await peekable.peek();\n\n    if (done) {\n      yield {\n        content: []\n      };\n      return;\n    }\n\n    peekable.push(value);\n\n    if (Number.isInteger(value) || isBytes(value) || typeof value === 'string' || value instanceof String) {\n      yield toFileObject(peekable, normaliseContent);\n      return;\n    }\n\n    throw errCode(new Error('Unexpected input: multiple items passed - if you are using ipfs.add, please use ipfs.addAll instead'), 'ERR_UNEXPECTED_INPUT');\n  }\n\n  if (isFileObject(input)) {\n    yield toFileObject(input, normaliseContent);\n    return;\n  }\n\n  throw errCode(new Error('Unexpected input: cannot convert \"' + typeof input + '\" into ImportCandidate'), 'ERR_UNEXPECTED_INPUT');\n}\n\nasync function toFileObject(input, normaliseContent) {\n  const {\n    path,\n    mode,\n    mtime,\n    content\n  } = input;\n  const file = {\n    path: path || '',\n    mode: parseMode(mode),\n    mtime: parseMtime(mtime)\n  };\n\n  if (content) {\n    file.content = await normaliseContent(content);\n  } else if (!path) {\n    file.content = await normaliseContent(input);\n  }\n\n  return file;\n}","map":{"version":3,"sources":["/home/alex/Documents/gitest/Marketplace/node_modules/ipfs-core-utils/esm/src/files/normalise-candidate-single.js"],"names":["errCode","browserStreamToIt","itPeekable","isBytes","isBlob","isReadableStream","isFileObject","parseMtime","parseMode","normaliseCandidateSingle","input","normaliseContent","undefined","Error","String","toFileObject","toString","Symbol","iterator","asyncIterator","peekable","value","done","peek","content","push","Number","isInteger","path","mode","mtime","file"],"mappings":"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","sourcesContent":["import errCode from 'err-code';\nimport browserStreamToIt from 'browser-readablestream-to-it';\nimport itPeekable from 'it-peekable';\nimport {\n  isBytes,\n  isBlob,\n  isReadableStream,\n  isFileObject\n} from './utils.js';\nimport {\n  parseMtime,\n  parseMode\n} from 'ipfs-unixfs';\nexport async function* normaliseCandidateSingle(input, normaliseContent) {\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${ input }`), 'ERR_UNEXPECTED_INPUT');\n  }\n  if (typeof input === 'string' || input instanceof String) {\n    yield toFileObject(input.toString(), normaliseContent);\n    return;\n  }\n  if (isBytes(input) || isBlob(input)) {\n    yield toFileObject(input, normaliseContent);\n    return;\n  }\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input);\n  }\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable(input);\n    const {value, done} = await peekable.peek();\n    if (done) {\n      yield { content: [] };\n      return;\n    }\n    peekable.push(value);\n    if (Number.isInteger(value) || isBytes(value) || typeof value === 'string' || value instanceof String) {\n      yield toFileObject(peekable, normaliseContent);\n      return;\n    }\n    throw errCode(new Error('Unexpected input: multiple items passed - if you are using ipfs.add, please use ipfs.addAll instead'), 'ERR_UNEXPECTED_INPUT');\n  }\n  if (isFileObject(input)) {\n    yield toFileObject(input, normaliseContent);\n    return;\n  }\n  throw errCode(new Error('Unexpected input: cannot convert \"' + typeof input + '\" into ImportCandidate'), 'ERR_UNEXPECTED_INPUT');\n}\nasync function toFileObject(input, normaliseContent) {\n  const {path, mode, mtime, content} = input;\n  const file = {\n    path: path || '',\n    mode: parseMode(mode),\n    mtime: parseMtime(mtime)\n  };\n  if (content) {\n    file.content = await normaliseContent(content);\n  } else if (!path) {\n    file.content = await normaliseContent(input);\n  }\n  return file;\n}"]},"metadata":{},"sourceType":"module"}