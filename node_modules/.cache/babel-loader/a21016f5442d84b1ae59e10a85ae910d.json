{"ast":null,"code":"import errcode from 'err-code';\nimport * as Pb from './unixfs.js';\nconst PBData = Pb.Data;\nconst types = ['raw', 'directory', 'file', 'metadata', 'symlink', 'hamt-sharded-directory'];\nconst dirTypes = ['directory', 'hamt-sharded-directory'];\nconst DEFAULT_FILE_MODE = parseInt('0644', 8);\nconst DEFAULT_DIRECTORY_MODE = parseInt('0755', 8);\nexport function parseMode(mode) {\n  if (mode == null) {\n    return undefined;\n  }\n\n  if (typeof mode === 'number') {\n    return mode & 4095;\n  }\n\n  mode = mode.toString();\n\n  if (mode.substring(0, 1) === '0') {\n    return parseInt(mode, 8) & 4095;\n  }\n\n  return parseInt(mode, 10) & 4095;\n}\nexport function parseMtime(input) {\n  if (input == null) {\n    return undefined;\n  }\n\n  let mtime;\n\n  if (input.secs != null) {\n    mtime = {\n      secs: input.secs,\n      nsecs: input.nsecs\n    };\n  }\n\n  if (input.Seconds != null) {\n    mtime = {\n      secs: input.Seconds,\n      nsecs: input.FractionalNanoseconds\n    };\n  }\n\n  if (Array.isArray(input)) {\n    mtime = {\n      secs: input[0],\n      nsecs: input[1]\n    };\n  }\n\n  if (input instanceof Date) {\n    const ms = input.getTime();\n    const secs = Math.floor(ms / 1000);\n    mtime = {\n      secs: secs,\n      nsecs: (ms - secs * 1000) * 1000\n    };\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {\n    return undefined;\n  }\n\n  if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) {\n    throw errcode(new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS');\n  }\n\n  return mtime;\n}\n\nclass UnixFS {\n  static unmarshal(marshaled) {\n    const message = PBData.decode(marshaled);\n    const decoded = PBData.toObject(message, {\n      defaults: false,\n      arrays: true,\n      longs: Number,\n      objects: false\n    });\n    const data = new UnixFS({\n      type: types[decoded.Type],\n      data: decoded.Data,\n      blockSizes: decoded.blocksizes,\n      mode: decoded.mode,\n      mtime: decoded.mtime ? {\n        secs: decoded.mtime.Seconds,\n        nsecs: decoded.mtime.FractionalNanoseconds\n      } : undefined\n    });\n    data._originalMode = decoded.mode || 0;\n    return data;\n  }\n\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      type: 'file'\n    };\n    const {\n      type,\n      data,\n      blockSizes,\n      hashType,\n      fanout,\n      mtime,\n      mode\n    } = options;\n\n    if (type && !types.includes(type)) {\n      throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE');\n    }\n\n    this.type = type || 'file';\n    this.data = data;\n    this.hashType = hashType;\n    this.fanout = fanout;\n    this.blockSizes = blockSizes || [];\n    this._originalMode = 0;\n    this.mode = parseMode(mode);\n\n    if (mtime) {\n      this.mtime = parseMtime(mtime);\n\n      if (this.mtime && !this.mtime.nsecs) {\n        this.mtime.nsecs = 0;\n      }\n    }\n  }\n\n  set mode(mode) {\n    this._mode = this.isDirectory() ? DEFAULT_DIRECTORY_MODE : DEFAULT_FILE_MODE;\n    const parsedMode = parseMode(mode);\n\n    if (parsedMode !== undefined) {\n      this._mode = parsedMode;\n    }\n  }\n\n  get mode() {\n    return this._mode;\n  }\n\n  isDirectory() {\n    return Boolean(this.type && dirTypes.includes(this.type));\n  }\n\n  addBlockSize(size) {\n    this.blockSizes.push(size);\n  }\n\n  removeBlockSize(index) {\n    this.blockSizes.splice(index, 1);\n  }\n\n  fileSize() {\n    if (this.isDirectory()) {\n      return 0;\n    }\n\n    let sum = 0;\n    this.blockSizes.forEach(size => {\n      sum += size;\n    });\n\n    if (this.data) {\n      sum += this.data.length;\n    }\n\n    return sum;\n  }\n\n  marshal() {\n    let type;\n\n    switch (this.type) {\n      case 'raw':\n        type = PBData.DataType.Raw;\n        break;\n\n      case 'directory':\n        type = PBData.DataType.Directory;\n        break;\n\n      case 'file':\n        type = PBData.DataType.File;\n        break;\n\n      case 'metadata':\n        type = PBData.DataType.Metadata;\n        break;\n\n      case 'symlink':\n        type = PBData.DataType.Symlink;\n        break;\n\n      case 'hamt-sharded-directory':\n        type = PBData.DataType.HAMTShard;\n        break;\n\n      default:\n        throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE');\n    }\n\n    let data = this.data;\n\n    if (!this.data || !this.data.length) {\n      data = undefined;\n    }\n\n    let mode;\n\n    if (this.mode != null) {\n      mode = this._originalMode & 4294963200 | (parseMode(this.mode) || 0);\n\n      if (mode === DEFAULT_FILE_MODE && !this.isDirectory()) {\n        mode = undefined;\n      }\n\n      if (mode === DEFAULT_DIRECTORY_MODE && this.isDirectory()) {\n        mode = undefined;\n      }\n    }\n\n    let mtime;\n\n    if (this.mtime != null) {\n      const parsed = parseMtime(this.mtime);\n\n      if (parsed) {\n        mtime = {\n          Seconds: parsed.secs,\n          FractionalNanoseconds: parsed.nsecs\n        };\n\n        if (mtime.FractionalNanoseconds === 0) {\n          delete mtime.FractionalNanoseconds;\n        }\n      }\n    }\n\n    const pbData = {\n      Type: type,\n      Data: data,\n      filesize: this.isDirectory() ? undefined : this.fileSize(),\n      blocksizes: this.blockSizes,\n      hashType: this.hashType,\n      fanout: this.fanout,\n      mode,\n      mtime\n    };\n    return PBData.encode(pbData).finish();\n  }\n\n}\n\nexport { UnixFS };","map":{"version":3,"sources":["/home/alex/Documents/gitest/Marketplace/node_modules/ipfs-unixfs/esm/src/index.js"],"names":["errcode","Pb","PBData","Data","types","dirTypes","DEFAULT_FILE_MODE","parseInt","DEFAULT_DIRECTORY_MODE","parseMode","mode","undefined","toString","substring","parseMtime","input","mtime","secs","nsecs","Seconds","FractionalNanoseconds","Array","isArray","Date","ms","getTime","Math","floor","Object","prototype","hasOwnProperty","call","Error","UnixFS","unmarshal","marshaled","message","decode","decoded","toObject","defaults","arrays","longs","Number","objects","data","type","Type","blockSizes","blocksizes","_originalMode","constructor","options","hashType","fanout","includes","_mode","isDirectory","parsedMode","Boolean","addBlockSize","size","push","removeBlockSize","index","splice","fileSize","sum","forEach","length","marshal","DataType","Raw","Directory","File","Metadata","Symlink","HAMTShard","parsed","pbData","filesize","encode","finish"],"mappings":"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","sourcesContent":["import errcode from 'err-code';\nimport * as Pb from './unixfs.js';\nconst PBData = Pb.Data;\nconst types = [\n  'raw',\n  'directory',\n  'file',\n  'metadata',\n  'symlink',\n  'hamt-sharded-directory'\n];\nconst dirTypes = [\n  'directory',\n  'hamt-sharded-directory'\n];\nconst DEFAULT_FILE_MODE = parseInt('0644', 8);\nconst DEFAULT_DIRECTORY_MODE = parseInt('0755', 8);\nexport function parseMode(mode) {\n  if (mode == null) {\n    return undefined;\n  }\n  if (typeof mode === 'number') {\n    return mode & 4095;\n  }\n  mode = mode.toString();\n  if (mode.substring(0, 1) === '0') {\n    return parseInt(mode, 8) & 4095;\n  }\n  return parseInt(mode, 10) & 4095;\n}\nexport function parseMtime(input) {\n  if (input == null) {\n    return undefined;\n  }\n  let mtime;\n  if (input.secs != null) {\n    mtime = {\n      secs: input.secs,\n      nsecs: input.nsecs\n    };\n  }\n  if (input.Seconds != null) {\n    mtime = {\n      secs: input.Seconds,\n      nsecs: input.FractionalNanoseconds\n    };\n  }\n  if (Array.isArray(input)) {\n    mtime = {\n      secs: input[0],\n      nsecs: input[1]\n    };\n  }\n  if (input instanceof Date) {\n    const ms = input.getTime();\n    const secs = Math.floor(ms / 1000);\n    mtime = {\n      secs: secs,\n      nsecs: (ms - secs * 1000) * 1000\n    };\n  }\n  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {\n    return undefined;\n  }\n  if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) {\n    throw errcode(new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS');\n  }\n  return mtime;\n}\nclass UnixFS {\n  static unmarshal(marshaled) {\n    const message = PBData.decode(marshaled);\n    const decoded = PBData.toObject(message, {\n      defaults: false,\n      arrays: true,\n      longs: Number,\n      objects: false\n    });\n    const data = new UnixFS({\n      type: types[decoded.Type],\n      data: decoded.Data,\n      blockSizes: decoded.blocksizes,\n      mode: decoded.mode,\n      mtime: decoded.mtime ? {\n        secs: decoded.mtime.Seconds,\n        nsecs: decoded.mtime.FractionalNanoseconds\n      } : undefined\n    });\n    data._originalMode = decoded.mode || 0;\n    return data;\n  }\n  constructor(options = { type: 'file' }) {\n    const {type, data, blockSizes, hashType, fanout, mtime, mode} = options;\n    if (type && !types.includes(type)) {\n      throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE');\n    }\n    this.type = type || 'file';\n    this.data = data;\n    this.hashType = hashType;\n    this.fanout = fanout;\n    this.blockSizes = blockSizes || [];\n    this._originalMode = 0;\n    this.mode = parseMode(mode);\n    if (mtime) {\n      this.mtime = parseMtime(mtime);\n      if (this.mtime && !this.mtime.nsecs) {\n        this.mtime.nsecs = 0;\n      }\n    }\n  }\n  set mode(mode) {\n    this._mode = this.isDirectory() ? DEFAULT_DIRECTORY_MODE : DEFAULT_FILE_MODE;\n    const parsedMode = parseMode(mode);\n    if (parsedMode !== undefined) {\n      this._mode = parsedMode;\n    }\n  }\n  get mode() {\n    return this._mode;\n  }\n  isDirectory() {\n    return Boolean(this.type && dirTypes.includes(this.type));\n  }\n  addBlockSize(size) {\n    this.blockSizes.push(size);\n  }\n  removeBlockSize(index) {\n    this.blockSizes.splice(index, 1);\n  }\n  fileSize() {\n    if (this.isDirectory()) {\n      return 0;\n    }\n    let sum = 0;\n    this.blockSizes.forEach(size => {\n      sum += size;\n    });\n    if (this.data) {\n      sum += this.data.length;\n    }\n    return sum;\n  }\n  marshal() {\n    let type;\n    switch (this.type) {\n    case 'raw':\n      type = PBData.DataType.Raw;\n      break;\n    case 'directory':\n      type = PBData.DataType.Directory;\n      break;\n    case 'file':\n      type = PBData.DataType.File;\n      break;\n    case 'metadata':\n      type = PBData.DataType.Metadata;\n      break;\n    case 'symlink':\n      type = PBData.DataType.Symlink;\n      break;\n    case 'hamt-sharded-directory':\n      type = PBData.DataType.HAMTShard;\n      break;\n    default:\n      throw errcode(new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE');\n    }\n    let data = this.data;\n    if (!this.data || !this.data.length) {\n      data = undefined;\n    }\n    let mode;\n    if (this.mode != null) {\n      mode = this._originalMode & 4294963200 | (parseMode(this.mode) || 0);\n      if (mode === DEFAULT_FILE_MODE && !this.isDirectory()) {\n        mode = undefined;\n      }\n      if (mode === DEFAULT_DIRECTORY_MODE && this.isDirectory()) {\n        mode = undefined;\n      }\n    }\n    let mtime;\n    if (this.mtime != null) {\n      const parsed = parseMtime(this.mtime);\n      if (parsed) {\n        mtime = {\n          Seconds: parsed.secs,\n          FractionalNanoseconds: parsed.nsecs\n        };\n        if (mtime.FractionalNanoseconds === 0) {\n          delete mtime.FractionalNanoseconds;\n        }\n      }\n    }\n    const pbData = {\n      Type: type,\n      Data: data,\n      filesize: this.isDirectory() ? undefined : this.fileSize(),\n      blocksizes: this.blockSizes,\n      hashType: this.hashType,\n      fanout: this.fanout,\n      mode,\n      mtime\n    };\n    return PBData.encode(pbData).finish();\n  }\n}\nexport {\n  UnixFS\n};"]},"metadata":{},"sourceType":"module"}