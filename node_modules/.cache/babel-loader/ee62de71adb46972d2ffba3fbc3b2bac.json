{"ast":null,"code":"var _jsxFileName = \"/home/alex/Documents/gitest/Marketplace/src/MyItems.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { ethers } from \"ethers\";\nimport { Row, Form, Button, Card } from 'react-bootstrap';\nimport { create as ipfsHttpClient } from 'ipfs-http-client';\nimport CardItem from './components/CardItem';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0');\n\nconst MyItems = _ref => {\n  _s();\n\n  let {\n    marketplace,\n    account,\n    NFTAbi,\n    signer\n  } = _ref;\n  const [myitems, setMyitems] = useState([]);\n  useEffect(() => {\n    async function fetchUserItems() {\n      const totalmarketitems = (await marketplace.lengthItems()).toString();\n      let marketitems = [];\n\n      for (let i = 0; i <= totalmarketitems; i++) {\n        let nft = await marketplace.items(i);\n        marketitems.push(nft);\n      }\n\n      let collections = await marketplace.returnCollections();\n      let items = [];\n\n      for (let i = 0; i < collections.length; i++) {\n        let NFTcontract = new ethers.Contract(collections[i], NFTAbi.abi, signer);\n        let NFTcount = (await NFTcontract.tokenCount()).toString();\n\n        for (let j = 1; j <= NFTcount; j++) {\n          let NFTOwner = await NFTcontract.ownerOf(j);\n\n          if (NFTOwner.toLowerCase() == account) {\n            for (let z = 0; z <= totalmarketitems; z++) {\n              if (marketitems[z].nft.toLowerCase() == collections[i].toLowerCase() && marketitems[z].tokenId.toString() == j && marketitems[z].forSell == false && NFTOwner.toLowerCase() == account) {\n                let uri = await NFTcontract.tokenURI(j);\n                let nftname = await NFTcontract.name();\n                let item = {\n                  name: nftname + \" #\" + j.toString(),\n                  collection: collections[i],\n                  tokenid: j,\n                  image: uri\n                };\n                items.push(item);\n              }\n            }\n          }\n        }\n      }\n\n      setMyitems(items);\n    }\n\n    fetchUserItems();\n  }, []); // useEffect(() => fetchUserItems(), [])\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: myitems.map(x => /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(CardItem, {\n        image: x.image,\n        tokenid: x.tokenid,\n        collection: x.collection,\n        marketplace: marketplace,\n        name: x.name,\n        signer: signer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 42\n      }, this)\n    }, x.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 25\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MyItems, \"+mH3Gy0ROYlCk01qVCDxVO/kFUU=\");\n\n_c = MyItems;\nexport default MyItems;\n\nvar _c;\n\n$RefreshReg$(_c, \"MyItems\");","map":{"version":3,"sources":["/home/alex/Documents/gitest/Marketplace/src/MyItems.js"],"names":["useEffect","useState","ethers","Row","Form","Button","Card","create","ipfsHttpClient","CardItem","client","MyItems","marketplace","account","NFTAbi","signer","myitems","setMyitems","fetchUserItems","totalmarketitems","lengthItems","toString","marketitems","i","nft","items","push","collections","returnCollections","length","NFTcontract","Contract","abi","NFTcount","tokenCount","j","NFTOwner","ownerOf","toLowerCase","z","tokenId","forSell","uri","tokenURI","nftname","name","item","collection","tokenid","image","map","x"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\nimport { ethers } from \"ethers\"\nimport { Row, Form, Button, Card } from 'react-bootstrap'\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\nimport CardItem from './components/CardItem'\n\nconst client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\n\nconst MyItems = ({ marketplace, account, NFTAbi, signer }) => {\n\n  const [myitems, setMyitems] = useState([])\n\n  useEffect(() => {\n  async function fetchUserItems() {\n\n    const totalmarketitems = (await marketplace.lengthItems()).toString()\n    let marketitems = []\n\n    for (let i = 0; i <=totalmarketitems; i++) {\n      let nft = await marketplace.items(i)\n      marketitems.push(nft)\n    }\n\n    let collections = await marketplace.returnCollections()\n    let items = []\n\n    for (let i = 0; i < collections.length; i++) {\n      let NFTcontract = new ethers.Contract(collections[i], NFTAbi.abi, signer)\n      let NFTcount = (await NFTcontract.tokenCount()).toString()\n\n      for (let j = 1; j <= NFTcount; j++) {\n\n        let NFTOwner = await NFTcontract.ownerOf(j)\n        if (NFTOwner.toLowerCase() == account) {\n          \n          for (let z = 0; z <= totalmarketitems; z++){\n              \n            if (\n              marketitems[z].nft.toLowerCase() == collections[i].toLowerCase() &&\n              marketitems[z].tokenId.toString() == j &&\n              marketitems[z].forSell == false &&\n              NFTOwner.toLowerCase() == account\n\n              ) {\n\n              let uri = await NFTcontract.tokenURI(j)\n              let nftname = await NFTcontract.name()\n    \n              let item = {\n                name: nftname + \" #\" + j.toString(),\n                collection: collections[i],\n                tokenid: j,\n                image: uri\n              }\n\n              items.push(item)\n            }\n          }\n        }\n      }\n    }\n    \n    setMyitems(items)\n  \n  }\n  fetchUserItems()\n\n  }, [])\n\n  // useEffect(() => fetchUserItems(), [])\n\n  return (\n    <div>\n      {myitems.map(x => <li key={x.name}><CardItem image={x.image} tokenid={x.tokenid} collection={x.collection} marketplace={marketplace} name={x.name} signer={signer} /></li>)}\n    </div>\n  );\n}\n\nexport default MyItems"]},"metadata":{},"sourceType":"module"}