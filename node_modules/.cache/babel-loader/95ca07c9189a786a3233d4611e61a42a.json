{"ast":null,"code":"var _jsxFileName = \"/home/alex/Documents/gitest/Marketplace/src/components/HomeItem.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Row, Form, Button } from 'react-bootstrap';\nimport './Item.css';\nimport { ethers } from \"ethers\";\nimport MarketplaceAbi from './../contractsData/Marketplace.json';\nimport MarketplaceAddress from './../contractsData/Marketplace-address.json';\nimport NFTAbi from './../contractsData/NFT.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CardItem = props => {\n  _s();\n\n  const [price, setPrice] = useState(null);\n\n  async function buyNFT() {\n    const marketplace = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi.abi, props.signer);\n    const totalitems = (await marketplace.lengthItems()).toString();\n\n    for (let i = 0; i <= totalitems; i++) {\n      let nft = await marketplace.items(i);\n      let nftid = nft.tokenId.toString();\n      let nftaddress = nft.nft;\n      let price = nft.price;\n\n      if (nftid == props.tokenid && nftaddress == props.collection) {\n        console.log(\"in loop\");\n        let buy = await marketplace.buyNFT(i, {\n          value: price\n        });\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card__body\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: props.image,\n        className: \"card__image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"card__title\",\n        children: [props.name, \" (=) Price: \", props.price, \" ETH\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => buyNFT(),\n      className: \"card__btn\",\n      children: \"Buy NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CardItem, \"vbDBwyZPOT6S9w40r+PMwg6I/XQ=\");\n\n_c = CardItem;\nexport default CardItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardItem\");","map":{"version":3,"sources":["/home/alex/Documents/gitest/Marketplace/src/components/HomeItem.js"],"names":["React","useState","Row","Form","Button","ethers","MarketplaceAbi","MarketplaceAddress","NFTAbi","CardItem","props","price","setPrice","buyNFT","marketplace","Contract","address","abi","signer","totalitems","lengthItems","toString","i","nft","items","nftid","tokenId","nftaddress","tokenid","collection","console","log","buy","value","image","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,MAApB,QAAkC,iBAAlC;AACA,OAAO,YAAP;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,cAAP,MAA4B,qCAA5B;AACA,OAAOC,kBAAP,MAA+B,6CAA/B;AACA,OAAOC,MAAP,MAAmB,6BAAnB;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAExB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,IAAD,CAAlC;;AAEA,iBAAeY,MAAf,GAAwB;AACpB,UAAMC,WAAW,GAAG,IAAIT,MAAM,CAACU,QAAX,CAAoBR,kBAAkB,CAACS,OAAvC,EAAgDV,cAAc,CAACW,GAA/D,EAAoEP,KAAK,CAACQ,MAA1E,CAApB;AACA,UAAMC,UAAU,GAAG,CAAC,MAAML,WAAW,CAACM,WAAZ,EAAP,EAAkCC,QAAlC,EAAnB;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAGH,UAApB,EAAgCG,CAAC,EAAjC,EAAqC;AACjC,UAAIC,GAAG,GAAG,MAAMT,WAAW,CAACU,KAAZ,CAAkBF,CAAlB,CAAhB;AACA,UAAIG,KAAK,GAAGF,GAAG,CAACG,OAAJ,CAAYL,QAAZ,EAAZ;AACA,UAAIM,UAAU,GAAGJ,GAAG,CAACA,GAArB;AACA,UAAIZ,KAAK,GAAGY,GAAG,CAACZ,KAAhB;;AAEA,UAAIc,KAAK,IAAIf,KAAK,CAACkB,OAAf,IAA0BD,UAAU,IAAIjB,KAAK,CAACmB,UAAlD,EAA8D;AAC1DC,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AAEA,YAAIC,GAAG,GAAG,MAAMlB,WAAW,CAACD,MAAZ,CAAmBS,CAAnB,EAAsB;AAAEW,UAAAA,KAAK,EAAEtB;AAAT,SAAtB,CAAhB;AAEH;AACJ;AACJ;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,8BACI;AAAK,QAAA,GAAG,EAAED,KAAK,CAACwB,KAAhB;AAAuB,QAAA,SAAS,EAAC;AAAjC;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA,mBAA6BxB,KAAK,CAACyB,IAAnC,kBAAqDzB,KAAK,CAACC,KAA3D;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI;AAAQ,MAAA,OAAO,EAAE,MAAME,MAAM,EAA7B;AAAiC,MAAA,SAAS,EAAC,WAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CAhCD;;GAAMJ,Q;;KAAAA,Q;AAkCN,eAAeA,QAAf","sourcesContent":["import React, {useState} from 'react'\nimport { Row, Form, Button } from 'react-bootstrap'\nimport './Item.css'\nimport { ethers } from \"ethers\"\nimport MarketplaceAbi from  './../contractsData/Marketplace.json'\nimport MarketplaceAddress from './../contractsData/Marketplace-address.json'\nimport NFTAbi from './../contractsData/NFT.json'\n\nconst CardItem = (props) => {\n\n    const [price, setPrice] = useState(null)\n\n    async function buyNFT() {\n        const marketplace = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi.abi, props.signer)\n        const totalitems = (await marketplace.lengthItems()).toString()\n        \n        for (let i = 0; i <=totalitems; i++) {\n            let nft = await marketplace.items(i)\n            let nftid = nft.tokenId.toString()\n            let nftaddress = nft.nft\n            let price = nft.price\n            \n            if (nftid == props.tokenid && nftaddress == props.collection) {\n                console.log(\"in loop\")\n                \n                let buy = await marketplace.buyNFT(i, { value: price})\n        \n            }\n        }\n    }\n\n    return (\n        <div className=\"card\">\n            <div className=\"card__body\">\n                <img src={props.image} className=\"card__image\" />\n                <h2 className=\"card__title\">{props.name} (=) Price: {props.price} ETH</h2>\n            </div>\n            <button onClick={() => buyNFT()} className=\"card__btn\">Buy NFT</button>\n        </div>\n    )\n}\n\nexport default CardItem"]},"metadata":{},"sourceType":"module"}