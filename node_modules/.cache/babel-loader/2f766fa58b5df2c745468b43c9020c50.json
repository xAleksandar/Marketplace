{"ast":null,"code":"var _jsxFileName = \"/home/alex/Documents/gitest/Marketplace/src/MintNFT.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { ethers } from \"ethers\";\nimport { Row, Form, Button } from 'react-bootstrap';\nimport { create as ipfsHttpClient } from 'ipfs-http-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0');\n\nconst MintNFT = _ref => {\n  _s();\n\n  let {\n    marketplace,\n    account,\n    NFTAbi,\n    signer\n  } = _ref;\n  const [image, setImage] = useState('');\n  const [collections, setCollections] = useState([]);\n  const [collectionNames, setCollectionNames] = useState([]);\n  const [usecollection, setUseCollection] = useState(null);\n\n  const uploadToIPFS = async event => {\n    event.preventDefault();\n    const file = event.target.files[0];\n\n    if (typeof file !== 'undefined') {\n      try {\n        const result = await client.add(file);\n        setImage(`https://ipfs.infura.io/ipfs/${result.path}`);\n      } catch (error) {\n        console.log(\"ipfs image upload error: \", error);\n      }\n    }\n  };\n\n  const createNFT = async () => {\n    if (!image) return;\n    const result = await client.add(JSON.stringify({\n      usecollection,\n      image\n    }));\n    await marketplace.mintNFT(usecollection, image);\n  };\n\n  useEffect(() => {\n    async function loadNFT() {\n      let cols = await marketplace.returnCollections();\n      let newcollections = [];\n      let newnames = [];\n\n      for (let i = 0; i < cols.length; i++) {\n        let nftcontract = new ethers.Contract(cols[i], NFTAbi.abi, signer);\n        let nftname = await nftcontract.name();\n        newcollections.push(cols[i]);\n        newnames.push(nftname);\n      }\n\n      setCollectionNames(newnames);\n      setCollections(newcollections);\n      setUseCollection(newcollections[0]);\n    }\n\n    loadNFT();\n  }, []);\n\n  function changeCollection(x) {\n    for (let i = 0; i < collections.length; i++) {\n      if (collectionNames[i] == x) {\n        setUseCollection(i);\n      }\n    }\n  } // useEffect(() => loadNFT(), [])\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid mt-5\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 mx-auto\",\n        style: {\n          maxWidth: '1000px'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"content mx-auto\",\n          children: /*#__PURE__*/_jsxDEV(Row, {\n            className: \"g-4\",\n            children: [collectionNames.map(x => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => changeCollection(x),\n                children: x\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 53\n              }, this)\n            }, x, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 41\n            }, this)), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"file\",\n              required: true,\n              name: \"file\",\n              onChange: uploadToIPFS\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"d-grid px-0\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: createNFT,\n                variant: \"primary\",\n                size: \"lg\",\n                children: \"Mint NFT!\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MintNFT, \"SrvNq9klVugCXLnskrJ+N7HCo4Q=\");\n\n_c = MintNFT;\nexport default MintNFT;\n\nvar _c;\n\n$RefreshReg$(_c, \"MintNFT\");","map":{"version":3,"sources":["/home/alex/Documents/gitest/Marketplace/src/MintNFT.js"],"names":["useState","useEffect","ethers","Row","Form","Button","create","ipfsHttpClient","client","MintNFT","marketplace","account","NFTAbi","signer","image","setImage","collections","setCollections","collectionNames","setCollectionNames","usecollection","setUseCollection","uploadToIPFS","event","preventDefault","file","target","files","result","add","path","error","console","log","createNFT","JSON","stringify","mintNFT","loadNFT","cols","returnCollections","newcollections","newnames","i","length","nftcontract","Contract","abi","nftname","name","push","changeCollection","x","maxWidth","map"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport { ethers } from \"ethers\"\nimport { Row, Form, Button } from 'react-bootstrap'\nimport { create as ipfsHttpClient } from 'ipfs-http-client'\nconst client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')\n\nconst MintNFT = ({ marketplace, account, NFTAbi, signer }) => {\n  const [image, setImage] = useState('')\n  const [collections, setCollections] = useState([]);\n  const [collectionNames, setCollectionNames] = useState([]);\n  const [usecollection, setUseCollection] = useState(null)\n  \n  const uploadToIPFS = async (event) => {\n    event.preventDefault()\n    const file = event.target.files[0]\n    if (typeof file !== 'undefined') {\n      try {\n        const result = await client.add(file)\n        \n        setImage(`https://ipfs.infura.io/ipfs/${result.path}`)\n      } catch (error){\n        console.log(\"ipfs image upload error: \", error)\n      }\n    }\n  }\n\n  const createNFT = async () => {\n    if (!image) return\n    \n    const result = await client.add(JSON.stringify({usecollection, image}))\n    await marketplace.mintNFT(usecollection, image)\n    \n  }\n  \n  useEffect(() => {\n  async function loadNFT() {\n    let cols = await marketplace.returnCollections()\n    let newcollections = []\n    let newnames = []\n    \n    for (let i = 0; i < cols.length; i++) {\n      \n      let nftcontract = new ethers.Contract(cols[i], NFTAbi.abi, signer)\n      let nftname = await nftcontract.name()\n      newcollections.push(cols[i])\n      newnames.push(nftname)\n    }\n    \n    setCollectionNames(newnames)\n    setCollections(newcollections)\n    setUseCollection(newcollections[0])\n  \n  }\n  loadNFT()\n  }, [])\n\n  function changeCollection(x) {\n    for (let i = 0; i < collections.length; i++) {\n      if (collectionNames[i] == x) {\n        setUseCollection(i)\n      }\n    }\n  }\n  \n  // useEffect(() => loadNFT(), [])\n\n  return (\n    <div className=\"container-fluid mt-5\">\n      <div className=\"row\">\n        <main role=\"main\" className=\"col-lg-12 mx-auto\" style={{ maxWidth: '1000px' }}>\n          <div className=\"content mx-auto\">\n            <Row className=\"g-4\">\n              {collectionNames.map(x => <li key={x}><Button onClick={() => changeCollection(x)} >{x}</Button></li>)}\n              <Form.Control\n                type=\"file\"\n                required\n                name=\"file\"\n                onChange={uploadToIPFS}\n              />\n              \n              <div className=\"d-grid px-0\">\n                <Button onClick={createNFT} variant=\"primary\" size=\"lg\">\n                  Mint NFT!\n                </Button>\n              </div>\n            </Row>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n\nexport default MintNFT\n"]},"metadata":{},"sourceType":"module"}