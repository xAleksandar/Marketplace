{"ast":null,"code":"import { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { Multiaddr } from 'multiaddr';\nexport const createReset = configure(api => {\n  async function reset() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const res = await api.post('bootstrap/add', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({ ...options,\n        default: true\n      }),\n      headers: options.headers\n    });\n    const {\n      Peers\n    } = await res.json();\n    return {\n      Peers: Peers.map(ma => new Multiaddr(ma))\n    };\n  }\n\n  return reset;\n});","map":{"version":3,"sources":["/home/alex/Documents/gitest/Marketplace/node_modules/ipfs-http-client/esm/src/bootstrap/reset.js"],"names":["configure","toUrlSearchParams","Multiaddr","createReset","api","reset","options","res","post","signal","searchParams","default","headers","Peers","json","map","ma"],"mappings":"AAAA,SAASA,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA,OAAO,MAAMC,WAAW,GAAGH,SAAS,CAACI,GAAG,IAAI;AAC1C,iBAAeC,KAAf,GAAmC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACjC,UAAMC,GAAG,GAAG,MAAMH,GAAG,CAACI,IAAJ,CAAS,eAAT,EAA0B;AAC1CC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MAD0B;AAE1CC,MAAAA,YAAY,EAAET,iBAAiB,CAAC,EAC9B,GAAGK,OAD2B;AAE9BK,QAAAA,OAAO,EAAE;AAFqB,OAAD,CAFW;AAM1CC,MAAAA,OAAO,EAAEN,OAAO,CAACM;AANyB,KAA1B,CAAlB;AAQA,UAAM;AAACC,MAAAA;AAAD,QAAU,MAAMN,GAAG,CAACO,IAAJ,EAAtB;AACA,WAAO;AAAED,MAAAA,KAAK,EAAEA,KAAK,CAACE,GAAN,CAAUC,EAAE,IAAI,IAAId,SAAJ,CAAcc,EAAd,CAAhB;AAAT,KAAP;AACD;;AACD,SAAOX,KAAP;AACD,CAdmC,CAA7B","sourcesContent":["import { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { Multiaddr } from 'multiaddr';\nexport const createReset = configure(api => {\n  async function reset(options = {}) {\n    const res = await api.post('bootstrap/add', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        ...options,\n        default: true\n      }),\n      headers: options.headers\n    });\n    const {Peers} = await res.json();\n    return { Peers: Peers.map(ma => new Multiaddr(ma)) };\n  }\n  return reset;\n});"]},"metadata":{},"sourceType":"module"}