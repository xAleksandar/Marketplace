{"ast":null,"code":"import { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { Multiaddr } from 'multiaddr';\nexport const createAdd = configure(api => {\n  async function add(addr) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const res = await api.post('bootstrap/add', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: addr,\n        ...options\n      }),\n      headers: options.headers\n    });\n    const {\n      Peers\n    } = await res.json();\n    return {\n      Peers: Peers.map(ma => new Multiaddr(ma))\n    };\n  }\n\n  return add;\n});","map":{"version":3,"sources":["/home/alex/Documents/gitest/Marketplace/node_modules/ipfs-http-client/esm/src/bootstrap/add.js"],"names":["configure","toUrlSearchParams","Multiaddr","createAdd","api","add","addr","options","res","post","signal","searchParams","arg","headers","Peers","json","map","ma"],"mappings":"AAAA,SAASA,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,SAAT,QAA0B,WAA1B;AACA,OAAO,MAAMC,SAAS,GAAGH,SAAS,CAACI,GAAG,IAAI;AACxC,iBAAeC,GAAf,CAAmBC,IAAnB,EAAuC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACrC,UAAMC,GAAG,GAAG,MAAMJ,GAAG,CAACK,IAAJ,CAAS,eAAT,EAA0B;AAC1CC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MAD0B;AAE1CC,MAAAA,YAAY,EAAEV,iBAAiB,CAAC;AAC9BW,QAAAA,GAAG,EAAEN,IADyB;AAE9B,WAAGC;AAF2B,OAAD,CAFW;AAM1CM,MAAAA,OAAO,EAAEN,OAAO,CAACM;AANyB,KAA1B,CAAlB;AAQA,UAAM;AAACC,MAAAA;AAAD,QAAU,MAAMN,GAAG,CAACO,IAAJ,EAAtB;AACA,WAAO;AAAED,MAAAA,KAAK,EAAEA,KAAK,CAACE,GAAN,CAAUC,EAAE,IAAI,IAAIf,SAAJ,CAAce,EAAd,CAAhB;AAAT,KAAP;AACD;;AACD,SAAOZ,GAAP;AACD,CAdiC,CAA3B","sourcesContent":["import { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { Multiaddr } from 'multiaddr';\nexport const createAdd = configure(api => {\n  async function add(addr, options = {}) {\n    const res = await api.post('bootstrap/add', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: addr,\n        ...options\n      }),\n      headers: options.headers\n    });\n    const {Peers} = await res.json();\n    return { Peers: Peers.map(ma => new Multiaddr(ma)) };\n  }\n  return add;\n});"]},"metadata":{},"sourceType":"module"}