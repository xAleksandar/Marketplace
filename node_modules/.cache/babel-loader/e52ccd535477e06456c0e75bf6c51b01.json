{"ast":null,"code":"'use strict';\n\nconst codec = require('./codec');\n\nconst protocols = require('./protocols-table');\n\nconst varint = require('varint');\n\nconst {\n  CID\n} = require('multiformats/cid');\n\nconst {\n  base58btc\n} = require('multiformats/bases/base58');\n\nconst errCode = require('err-code');\n\nconst inspect = Symbol.for('nodejs.util.inspect.custom');\n\nconst {\n  toString: uint8ArrayToString\n} = require('uint8arrays/to-string');\n\nconst {\n  equals: uint8ArrayEquals\n} = require('uint8arrays/equals');\n/**\n * @typedef {(addr: Multiaddr) => Promise<string[]>} Resolver\n * @typedef {string | Multiaddr | Uint8Array | null} MultiaddrInput\n * @typedef {import('./types').MultiaddrObject} MultiaddrObject\n * @typedef {import('./types').Protocol} Protocol\n */\n\n/** @type {Map<string, Resolver>} */\n\n\nconst resolvers = new Map();\nconst symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr');\n/**\n * Creates a [multiaddr](https://github.com/multiformats/multiaddr) from\n * a Uint8Array, String or another Multiaddr instance\n * public key.\n *\n */\n\nclass Multiaddr {\n  /**\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   * ```\n   *\n   * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n   */\n  constructor(addr) {\n    // default\n    if (addr == null) {\n      addr = '';\n    } // Define symbol\n\n\n    Object.defineProperty(this, symbol, {\n      value: true\n    });\n\n    if (addr instanceof Uint8Array) {\n      /** @type {Uint8Array} - The raw bytes representing this multiaddress */\n      this.bytes = codec.fromBytes(addr);\n    } else if (typeof addr === 'string') {\n      if (addr.length > 0 && addr.charAt(0) !== '/') {\n        throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`);\n      }\n\n      this.bytes = codec.fromString(addr);\n    } else if (Multiaddr.isMultiaddr(addr)) {\n      // Multiaddr\n      this.bytes = codec.fromBytes(addr.bytes); // validate + copy buffer\n    } else {\n      throw new Error('addr must be a string, Buffer, or another Multiaddr');\n    }\n  }\n  /**\n   * Returns Multiaddr as a String\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').toString()\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n\n\n  toString() {\n    return codec.bytesToString(this.bytes);\n  }\n  /**\n   * Returns Multiaddr as a JSON encoded object\n   *\n   * @example\n   * ```js\n   * JSON.stringify(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n\n\n  toJSON() {\n    return this.toString();\n  }\n  /**\n   * Returns Multiaddr as a convinient options object to be used with net.createConnection\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').toOptions()\n   * // { family: 4, host: '127.0.0.1', transport: 'tcp', port: 4001 }\n   * ```\n   */\n\n\n  toOptions() {\n    /** @type {MultiaddrObject} */\n    const opts = {};\n    const parsed = this.toString().split('/');\n    opts.family = parsed[1] === 'ip4' ? 4 : 6;\n    opts.host = parsed[2];\n    opts.transport = parsed[3];\n    opts.port = parseInt(parsed[4]);\n    return opts;\n  }\n  /**\n   * Returns the protocols the Multiaddr is defined with, as an array of objects, in\n   * left-to-right order. Each object contains the protocol code, protocol name,\n   * and the size of its address space in bits.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').protos()\n   * // [ { code: 4, size: 32, name: 'ip4' },\n   * //   { code: 6, size: 16, name: 'tcp' } ]\n   * ```\n   *\n   * @returns {Protocol[]} protocols - All the protocols the address is composed of\n   */\n\n\n  protos() {\n    return this.protoCodes().map(code => Object.assign({}, protocols(code)));\n  }\n  /**\n   * Returns the codes of the protocols in left-to-right order.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * Multiaddr('/ip4/127.0.0.1/tcp/4001').protoCodes()\n   * // [ 4, 6 ]\n   * ```\n   *\n   * @returns {number[]} protocol codes\n   */\n\n\n  protoCodes() {\n    const codes = [];\n    const buf = this.bytes;\n    let i = 0;\n\n    while (i < buf.length) {\n      const code = varint.decode(buf, i);\n      const n = varint.decode.bytes;\n      const p = protocols(code);\n      const size = codec.sizeForAddr(p, buf.slice(i + n));\n      i += size + n;\n      codes.push(code);\n    }\n\n    return codes;\n  }\n  /**\n   * Returns the names of the protocols in left-to-right order.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').protoNames()\n   * // [ 'ip4', 'tcp' ]\n   * ```\n   *\n   * @returns {string[]} protocol names\n   */\n\n\n  protoNames() {\n    return this.protos().map(proto => proto.name);\n  }\n  /**\n   * Returns a tuple of parts\n   *\n   * @example\n   * ```js\n   * new Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").tuples()\n   * // [ [ 4, <Buffer 7f 00 00 01> ], [ 6, <Buffer 0f a1> ] ]\n   * ```\n   */\n\n\n  tuples() {\n    return codec.bytesToTuples(this.bytes);\n  }\n  /**\n   * Returns a tuple of string/number parts\n   * - tuples[][0] = code of protocol\n   * - tuples[][1] = contents of address\n   *\n   * @example\n   * ```js\n   * new Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").stringTuples()\n   * // [ [ 4, '127.0.0.1' ], [ 6, '4001' ] ]\n   * ```\n   */\n\n\n  stringTuples() {\n    const t = codec.bytesToTuples(this.bytes);\n    return codec.tuplesToStringTuples(t);\n  }\n  /**\n   * Encapsulates a Multiaddr in another Multiaddr\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n   *\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   *\n   * const mh3 = mh1.encapsulate(mh2)\n   * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\n   *\n   * mh3.toString()\n   * // '/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001'\n   * ```\n   *\n   * @param {MultiaddrInput} addr - Multiaddr to add into this Multiaddr\n   */\n\n\n  encapsulate(addr) {\n    addr = new Multiaddr(addr);\n    return new Multiaddr(this.toString() + addr.toString());\n  }\n  /**\n   * Decapsulates a Multiaddr from another Multiaddr\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n   *\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   *\n   * const mh3 = mh1.encapsulate(mh2)\n   * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\n   *\n   * mh3.decapsulate(mh2).toString()\n   * // '/ip4/8.8.8.8/tcp/1080'\n   * ```\n   *\n   * @param {Multiaddr | string} addr - Multiaddr to remove from this Multiaddr\n   * @returns {Multiaddr}\n   */\n\n\n  decapsulate(addr) {\n    const addrString = addr.toString();\n    const s = this.toString();\n    const i = s.lastIndexOf(addrString);\n\n    if (i < 0) {\n      throw new Error('Address ' + this + ' does not contain subaddress: ' + addr);\n    }\n\n    return new Multiaddr(s.slice(0, i));\n  }\n  /**\n   * A more reliable version of `decapsulate` if you are targeting a\n   * specific code, such as 421 (the `p2p` protocol code). The last index of the code\n   * will be removed from the `Multiaddr`, and a new instance will be returned.\n   * If the code is not present, the original `Multiaddr` is returned.\n   *\n   * @example\n   * ```js\n   * const addr = new Multiaddr('/ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC')\n   * // <Multiaddr 0400... - /ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC>\n   *\n   * addr.decapsulateCode(421).toString()\n   * // '/ip4/0.0.0.0/tcp/8080'\n   *\n   * new Multiaddr('/ip4/127.0.0.1/tcp/8080').decapsulateCode(421).toString()\n   * // '/ip4/127.0.0.1/tcp/8080'\n   * ```\n   *\n   * @param {number} code - The code of the protocol to decapsulate from this Multiaddr\n   * @returns {Multiaddr}\n   */\n\n\n  decapsulateCode(code) {\n    const tuples = this.tuples();\n\n    for (let i = tuples.length - 1; i >= 0; i--) {\n      if (tuples[i][0] === code) {\n        return new Multiaddr(codec.tuplesToBytes(tuples.slice(0, i)));\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Extract the peerId if the multiaddr contains one\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string>\n   *\n   * // should return QmValidBase58string or null if the id is missing or invalid\n   * const peerId = mh1.getPeerId()\n   * ```\n   *\n   * @returns {string | null} peerId - The id of the peer or null if invalid or missing from the ma\n   */\n\n\n  getPeerId() {\n    try {\n      const tuples = this.stringTuples().filter(tuple => {\n        if (tuple[0] === protocols.names.ipfs.code) {\n          return true;\n        }\n\n        return false;\n      }); // Get the last ipfs tuple ['ipfs', 'peerid string']\n\n      const tuple = tuples.pop();\n\n      if (tuple && tuple[1]) {\n        const peerIdStr = tuple[1]; // peer id is base58btc encoded string but not multibase encoded so add the `z`\n        // prefix so we can validate that it is correctly encoded\n\n        if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n          return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc');\n        } // try to parse peer id as CID\n\n\n        return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc');\n      }\n\n      return null;\n    } catch (e) {\n      return null;\n    }\n  }\n  /**\n   * Extract the path if the multiaddr contains one\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock>\n   *\n   * // should return utf8 string or null if the id is missing or invalid\n   * const path = mh1.getPath()\n   * ```js\n   *\n   * @returns {string | null} path - The path of the multiaddr, or null if no path protocol is present\n   */\n\n\n  getPath() {\n    let path = null;\n\n    try {\n      path = this.stringTuples().filter(tuple => {\n        const proto = protocols(tuple[0]);\n\n        if (proto.path) {\n          return true;\n        }\n\n        return false;\n      })[0][1];\n\n      if (!path) {\n        path = null;\n      }\n    } catch (e) {\n      path = null;\n    }\n\n    return path;\n  }\n  /**\n   * Checks if two Multiaddrs are the same\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n   *\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   *\n   * mh1.equals(mh1)\n   * // true\n   *\n   * mh1.equals(mh2)\n   * // false\n   * ```\n   *\n   * @param {Multiaddr} addr\n   * @returns {boolean}\n   */\n\n\n  equals(addr) {\n    return uint8ArrayEquals(this.bytes, addr.bytes);\n  }\n  /**\n   * Resolve multiaddr if containing resolvable hostname.\n   *\n   * @example\n   * ```js\n   * Multiaddr.resolvers.set('dnsaddr', resolverFunction)\n   * const mh1 = new Multiaddr('/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb')\n   * const resolvedMultiaddrs = await mh1.resolve()\n   * // [\n   * //   <Multiaddr 04934b5353060fa1a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/tcp/4001/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>,\n   * //   <Multiaddr 04934b53530601bbde03a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/tcp/443/wss/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>,\n   * //   <Multiaddr 04934b535391020fa1cc03a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/udp/4001/quic/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>\n   * // ]\n   * ```\n   *\n   * @returns {Promise<Array<Multiaddr>>}\n   */\n\n\n  async resolve() {\n    const resolvableProto = this.protos().find(p => p.resolvable); // Multiaddr is not resolvable?\n\n    if (!resolvableProto) {\n      return [this];\n    }\n\n    const resolver = resolvers.get(resolvableProto.name);\n\n    if (!resolver) {\n      throw errCode(new Error(`no available resolver for ${resolvableProto.name}`), 'ERR_NO_AVAILABLE_RESOLVER');\n    }\n\n    const addresses = await resolver(this);\n    return addresses.map(a => new Multiaddr(a));\n  }\n  /**\n   * Gets a Multiaddrs node-friendly address object. Note that protocol information\n   * is left out: in Node (and most network systems) the protocol is unknowable\n   * given only the address.\n   *\n   * Has to be a ThinWaist Address, otherwise throws error\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').nodeAddress()\n   * // {family: 4, address: '127.0.0.1', port: 4001}\n   * ```\n   *\n   * @returns {{family: 4 | 6, address: string, port: number}}\n   * @throws {Error} Throws error if Multiaddr is not a Thin Waist address\n   */\n\n\n  nodeAddress() {\n    const codes = this.protoCodes();\n    const names = this.protoNames();\n    const parts = this.toString().split('/').slice(1);\n\n    if (parts.length < 4) {\n      throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6}/{address}/{tcp, udp}/{port}\".');\n    } else if (codes[0] !== 4 && codes[0] !== 41 && codes[0] !== 54 && codes[0] !== 55) {\n      throw new Error(`no protocol with name: \"'${names[0]}'\". Must have a valid family name: \"{ip4, ip6, dns4, dns6}\".`);\n    } else if (parts[2] !== 'tcp' && parts[2] !== 'udp') {\n      throw new Error(`no protocol with name: \"'${names[1]}'\". Must have a valid transport protocol: \"{tcp, udp}\".`);\n    }\n\n    return {\n      family: codes[0] === 41 || codes[0] === 55 ? 6 : 4,\n      address: parts[1],\n      port: parseInt(parts[3]) // tcp or udp port\n\n    };\n  }\n  /**\n   * Returns if a Multiaddr is a Thin Waist address or not.\n   *\n   * Thin Waist is if a Multiaddr adheres to the standard combination of:\n   *\n   * `{IPv4, IPv6}/{TCP, UDP}`\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   * const mh2 = new Multiaddr('/ip4/192.168.2.1/tcp/5001')\n   * // <Multiaddr 04c0a80201061389 - /ip4/192.168.2.1/tcp/5001>\n   * const mh3 = mh1.encapsulate(mh2)\n   * // <Multiaddr 047f000001060fa104c0a80201061389 - /ip4/127.0.0.1/tcp/4001/ip4/192.168.2.1/tcp/5001>\n   * const mh4 = new Multiaddr('/ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a')\n   * // <Multiaddr 047f0000010607d0de039302a503221220d52ebb89d85b02a284948203a62ff28389c57c9f42beec4ec20db76a64835843 - /ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a>\n   * mh1.isThinWaistAddress()\n   * // true\n   * mh2.isThinWaistAddress()\n   * // true\n   * mh3.isThinWaistAddress()\n   * // false\n   * mh4.isThinWaistAddress()\n   * // false\n   * ```\n   *\n   * @param {Multiaddr} [addr] - Defaults to using `this` instance\n   */\n\n\n  isThinWaistAddress(addr) {\n    const protos = (addr || this).protos();\n\n    if (protos.length !== 2) {\n      return false;\n    }\n\n    if (protos[0].code !== 4 && protos[0].code !== 41) {\n      return false;\n    }\n\n    if (protos[1].code !== 6 && protos[1].code !== 273) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Creates a Multiaddr from a node-friendly address object\n   *\n   * @example\n   * ```js\n   * Multiaddr.fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   * ```\n   *\n   * @param {{family: 4 | 6, address: string, port: number}} addr\n   * @param {string} transport\n   */\n\n\n  static fromNodeAddress(addr, transport) {\n    if (!addr) {\n      throw new Error('requires node address object');\n    }\n\n    if (!transport) {\n      throw new Error('requires transport protocol');\n    }\n\n    let ip;\n\n    switch (addr.family) {\n      case 4:\n        ip = 'ip4';\n        break;\n\n      case 6:\n        ip = 'ip6';\n        break;\n\n      default:\n        throw Error(`Invalid addr family. Got '${addr.family}' instead of 4 or 6`);\n    }\n\n    return new Multiaddr('/' + [ip, addr.address, transport, addr.port].join('/'));\n  }\n  /**\n   * Returns if something is a Multiaddr that is a name\n   *\n   * @param {Multiaddr} addr\n   * @returns {boolean} isName\n   */\n\n\n  static isName(addr) {\n    if (!Multiaddr.isMultiaddr(addr)) {\n      return false;\n    } // if a part of the multiaddr is resolvable, then return true\n\n\n    return addr.protos().some(proto => proto.resolvable);\n  }\n  /**\n   * Check if object is a CID instance\n   *\n   * @param {any} value\n   * @returns {value is Multiaddr}\n   */\n\n\n  static isMultiaddr(value) {\n    return value instanceof Multiaddr || Boolean(value && value[symbol]);\n  }\n  /**\n   * Returns Multiaddr as a human-readable string.\n   * For post Node.js v10.0.0.\n   * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\n   *\n   * @example\n   * ```js\n   * console.log(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\n   * ```\n   *\n   * @returns {string}\n   */\n\n\n  [inspect]() {\n    return '<Multiaddr ' + uint8ArrayToString(this.bytes, 'base16') + ' - ' + codec.bytesToString(this.bytes) + '>';\n  }\n  /**\n   * Returns Multiaddr as a human-readable string.\n   * Fallback for pre Node.js v10.0.0.\n   * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').inspect()\n   * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\n   * ```\n   *\n   * @returns {string}\n   */\n\n\n  inspect() {\n    return '<Multiaddr ' + uint8ArrayToString(this.bytes, 'base16') + ' - ' + codec.bytesToString(this.bytes) + '>';\n  }\n\n}\n/**\n * Object containing table, names and codes of all supported protocols.\n * To get the protocol values from a Multiaddr, you can use\n * [`.protos()`](#multiaddrprotos),\n * [`.protoCodes()`](#multiaddrprotocodes) or\n * [`.protoNames()`](#multiaddrprotonames)\n *\n * @returns {{table: Array, names: Object, codes: Object}}\n */\n\n\nMultiaddr.protocols = protocols;\nMultiaddr.resolvers = resolvers;\n/**\n * Static factory\n *\n * @param {MultiaddrInput} addr\n */\n\nfunction multiaddr(addr) {\n  return new Multiaddr(addr);\n}\n\nmodule.exports = {\n  Multiaddr,\n  multiaddr,\n  protocols,\n  resolvers\n};","map":{"version":3,"sources":["/home/alex/Documents/gitest/Marketplace/node_modules/multiaddr/src/index.js"],"names":["codec","require","protocols","varint","CID","base58btc","errCode","inspect","Symbol","for","toString","uint8ArrayToString","equals","uint8ArrayEquals","resolvers","Map","symbol","Multiaddr","constructor","addr","Object","defineProperty","value","Uint8Array","bytes","fromBytes","length","charAt","Error","fromString","isMultiaddr","bytesToString","toJSON","toOptions","opts","parsed","split","family","host","transport","port","parseInt","protos","protoCodes","map","code","assign","codes","buf","i","decode","n","p","size","sizeForAddr","slice","push","protoNames","proto","name","tuples","bytesToTuples","stringTuples","t","tuplesToStringTuples","encapsulate","decapsulate","addrString","s","lastIndexOf","decapsulateCode","tuplesToBytes","getPeerId","filter","tuple","names","ipfs","pop","peerIdStr","parse","multihash","e","getPath","path","resolve","resolvableProto","find","resolvable","resolver","get","addresses","a","nodeAddress","parts","address","isThinWaistAddress","fromNodeAddress","ip","join","isName","some","Boolean","multiaddr","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst codec = require('./codec')\nconst protocols = require('./protocols-table')\nconst varint = require('varint')\nconst { CID } = require('multiformats/cid')\nconst { base58btc } = require('multiformats/bases/base58')\nconst errCode = require('err-code')\nconst inspect = Symbol.for('nodejs.util.inspect.custom')\nconst { toString: uint8ArrayToString } = require('uint8arrays/to-string')\nconst { equals: uint8ArrayEquals } = require('uint8arrays/equals')\n\n/**\n * @typedef {(addr: Multiaddr) => Promise<string[]>} Resolver\n * @typedef {string | Multiaddr | Uint8Array | null} MultiaddrInput\n * @typedef {import('./types').MultiaddrObject} MultiaddrObject\n * @typedef {import('./types').Protocol} Protocol\n */\n\n/** @type {Map<string, Resolver>} */\nconst resolvers = new Map()\nconst symbol = Symbol.for('@multiformats/js-multiaddr/multiaddr')\n\n/**\n * Creates a [multiaddr](https://github.com/multiformats/multiaddr) from\n * a Uint8Array, String or another Multiaddr instance\n * public key.\n *\n */\nclass Multiaddr {\n  /**\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   * ```\n   *\n   * @param {MultiaddrInput} [addr] - If String or Uint8Array, needs to adhere to the address format of a [multiaddr](https://github.com/multiformats/multiaddr#string-format)\n   */\n  constructor (addr) {\n    // default\n    if (addr == null) {\n      addr = ''\n    }\n\n    // Define symbol\n    Object.defineProperty(this, symbol, { value: true })\n\n    if (addr instanceof Uint8Array) {\n      /** @type {Uint8Array} - The raw bytes representing this multiaddress */\n      this.bytes = codec.fromBytes(addr)\n    } else if (typeof addr === 'string') {\n      if (addr.length > 0 && addr.charAt(0) !== '/') {\n        throw new Error(`multiaddr \"${addr}\" must start with a \"/\"`)\n      }\n      this.bytes = codec.fromString(addr)\n    } else if (Multiaddr.isMultiaddr(addr)) { // Multiaddr\n      this.bytes = codec.fromBytes(addr.bytes) // validate + copy buffer\n    } else {\n      throw new Error('addr must be a string, Buffer, or another Multiaddr')\n    }\n  }\n\n  /**\n   * Returns Multiaddr as a String\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').toString()\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n  toString () {\n    return codec.bytesToString(this.bytes)\n  }\n\n  /**\n   * Returns Multiaddr as a JSON encoded object\n   *\n   * @example\n   * ```js\n   * JSON.stringify(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // '/ip4/127.0.0.1/tcp/4001'\n   * ```\n   */\n  toJSON () {\n    return this.toString()\n  }\n\n  /**\n   * Returns Multiaddr as a convinient options object to be used with net.createConnection\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').toOptions()\n   * // { family: 4, host: '127.0.0.1', transport: 'tcp', port: 4001 }\n   * ```\n   */\n  toOptions () {\n    /** @type {MultiaddrObject} */\n    const opts = {}\n    const parsed = this.toString().split('/')\n    opts.family = parsed[1] === 'ip4' ? 4 : 6\n    opts.host = parsed[2]\n    opts.transport = parsed[3]\n    opts.port = parseInt(parsed[4])\n    return opts\n  }\n\n  /**\n   * Returns the protocols the Multiaddr is defined with, as an array of objects, in\n   * left-to-right order. Each object contains the protocol code, protocol name,\n   * and the size of its address space in bits.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').protos()\n   * // [ { code: 4, size: 32, name: 'ip4' },\n   * //   { code: 6, size: 16, name: 'tcp' } ]\n   * ```\n   *\n   * @returns {Protocol[]} protocols - All the protocols the address is composed of\n   */\n  protos () {\n    return this.protoCodes().map(code => Object.assign({}, protocols(code)))\n  }\n\n  /**\n   * Returns the codes of the protocols in left-to-right order.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * Multiaddr('/ip4/127.0.0.1/tcp/4001').protoCodes()\n   * // [ 4, 6 ]\n   * ```\n   *\n   * @returns {number[]} protocol codes\n   */\n  protoCodes () {\n    const codes = []\n    const buf = this.bytes\n    let i = 0\n    while (i < buf.length) {\n      const code = varint.decode(buf, i)\n      const n = varint.decode.bytes\n\n      const p = protocols(code)\n      const size = codec.sizeForAddr(p, buf.slice(i + n))\n\n      i += (size + n)\n      codes.push(code)\n    }\n\n    return codes\n  }\n\n  /**\n   * Returns the names of the protocols in left-to-right order.\n   * [See list of protocols](https://github.com/multiformats/multiaddr/blob/master/protocols.csv)\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').protoNames()\n   * // [ 'ip4', 'tcp' ]\n   * ```\n   *\n   * @returns {string[]} protocol names\n   */\n  protoNames () {\n    return this.protos().map(proto => proto.name)\n  }\n\n  /**\n   * Returns a tuple of parts\n   *\n   * @example\n   * ```js\n   * new Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").tuples()\n   * // [ [ 4, <Buffer 7f 00 00 01> ], [ 6, <Buffer 0f a1> ] ]\n   * ```\n   */\n  tuples () {\n    return codec.bytesToTuples(this.bytes)\n  }\n\n  /**\n   * Returns a tuple of string/number parts\n   * - tuples[][0] = code of protocol\n   * - tuples[][1] = contents of address\n   *\n   * @example\n   * ```js\n   * new Multiaddr(\"/ip4/127.0.0.1/tcp/4001\").stringTuples()\n   * // [ [ 4, '127.0.0.1' ], [ 6, '4001' ] ]\n   * ```\n   */\n  stringTuples () {\n    const t = codec.bytesToTuples(this.bytes)\n    return codec.tuplesToStringTuples(t)\n  }\n\n  /**\n   * Encapsulates a Multiaddr in another Multiaddr\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n   *\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   *\n   * const mh3 = mh1.encapsulate(mh2)\n   * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\n   *\n   * mh3.toString()\n   * // '/ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001'\n   * ```\n   *\n   * @param {MultiaddrInput} addr - Multiaddr to add into this Multiaddr\n   */\n  encapsulate (addr) {\n    addr = new Multiaddr(addr)\n    return new Multiaddr(this.toString() + addr.toString())\n  }\n\n  /**\n   * Decapsulates a Multiaddr from another Multiaddr\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n   *\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   *\n   * const mh3 = mh1.encapsulate(mh2)\n   * // <Multiaddr 0408080808060438047f000001060fa1 - /ip4/8.8.8.8/tcp/1080/ip4/127.0.0.1/tcp/4001>\n   *\n   * mh3.decapsulate(mh2).toString()\n   * // '/ip4/8.8.8.8/tcp/1080'\n   * ```\n   *\n   * @param {Multiaddr | string} addr - Multiaddr to remove from this Multiaddr\n   * @returns {Multiaddr}\n   */\n  decapsulate (addr) {\n    const addrString = addr.toString()\n    const s = this.toString()\n    const i = s.lastIndexOf(addrString)\n    if (i < 0) {\n      throw new Error('Address ' + this + ' does not contain subaddress: ' + addr)\n    }\n    return new Multiaddr(s.slice(0, i))\n  }\n\n  /**\n   * A more reliable version of `decapsulate` if you are targeting a\n   * specific code, such as 421 (the `p2p` protocol code). The last index of the code\n   * will be removed from the `Multiaddr`, and a new instance will be returned.\n   * If the code is not present, the original `Multiaddr` is returned.\n   *\n   * @example\n   * ```js\n   * const addr = new Multiaddr('/ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC')\n   * // <Multiaddr 0400... - /ip4/0.0.0.0/tcp/8080/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSupNKC>\n   *\n   * addr.decapsulateCode(421).toString()\n   * // '/ip4/0.0.0.0/tcp/8080'\n   *\n   * new Multiaddr('/ip4/127.0.0.1/tcp/8080').decapsulateCode(421).toString()\n   * // '/ip4/127.0.0.1/tcp/8080'\n   * ```\n   *\n   * @param {number} code - The code of the protocol to decapsulate from this Multiaddr\n   * @returns {Multiaddr}\n   */\n  decapsulateCode (code) {\n    const tuples = this.tuples()\n    for (let i = tuples.length - 1; i >= 0; i--) {\n      if (tuples[i][0] === code) {\n        return new Multiaddr(codec.tuplesToBytes(tuples.slice(0, i)))\n      }\n    }\n    return this\n  }\n\n  /**\n   * Extract the peerId if the multiaddr contains one\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/ipfs/QmValidBase58string>\n   *\n   * // should return QmValidBase58string or null if the id is missing or invalid\n   * const peerId = mh1.getPeerId()\n   * ```\n   *\n   * @returns {string | null} peerId - The id of the peer or null if invalid or missing from the ma\n   */\n  getPeerId () {\n    try {\n      const tuples = this.stringTuples().filter((tuple) => {\n        if (tuple[0] === protocols.names.ipfs.code) {\n          return true\n        }\n        return false\n      })\n\n      // Get the last ipfs tuple ['ipfs', 'peerid string']\n      const tuple = tuples.pop()\n      if (tuple && tuple[1]) {\n        const peerIdStr = tuple[1]\n\n        // peer id is base58btc encoded string but not multibase encoded so add the `z`\n        // prefix so we can validate that it is correctly encoded\n        if (peerIdStr[0] === 'Q' || peerIdStr[0] === '1') {\n          return uint8ArrayToString(base58btc.decode(`z${peerIdStr}`), 'base58btc')\n        }\n\n        // try to parse peer id as CID\n        return uint8ArrayToString(CID.parse(peerIdStr).multihash.bytes, 'base58btc')\n      }\n\n      return null\n    } catch (e) {\n      return null\n    }\n  }\n\n  /**\n   * Extract the path if the multiaddr contains one\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080/unix/tmp/p2p.sock>\n   *\n   * // should return utf8 string or null if the id is missing or invalid\n   * const path = mh1.getPath()\n   * ```js\n   *\n   * @returns {string | null} path - The path of the multiaddr, or null if no path protocol is present\n   */\n  getPath () {\n    let path = null\n    try {\n      path = this.stringTuples().filter((tuple) => {\n        const proto = protocols(tuple[0])\n        if (proto.path) {\n          return true\n        }\n        return false\n      })[0][1]\n\n      if (!path) {\n        path = null\n      }\n    } catch (e) {\n      path = null\n    }\n    return path\n  }\n\n  /**\n   * Checks if two Multiaddrs are the same\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/8.8.8.8/tcp/1080')\n   * // <Multiaddr 0408080808060438 - /ip4/8.8.8.8/tcp/1080>\n   *\n   * const mh2 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   *\n   * mh1.equals(mh1)\n   * // true\n   *\n   * mh1.equals(mh2)\n   * // false\n   * ```\n   *\n   * @param {Multiaddr} addr\n   * @returns {boolean}\n   */\n  equals (addr) {\n    return uint8ArrayEquals(this.bytes, addr.bytes)\n  }\n\n  /**\n   * Resolve multiaddr if containing resolvable hostname.\n   *\n   * @example\n   * ```js\n   * Multiaddr.resolvers.set('dnsaddr', resolverFunction)\n   * const mh1 = new Multiaddr('/dnsaddr/bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb')\n   * const resolvedMultiaddrs = await mh1.resolve()\n   * // [\n   * //   <Multiaddr 04934b5353060fa1a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/tcp/4001/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>,\n   * //   <Multiaddr 04934b53530601bbde03a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/tcp/443/wss/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>,\n   * //   <Multiaddr 04934b535391020fa1cc03a503221220c10f9319dac35c270a6b74cd644cb3acfc1f6efc8c821f8eb282599fd1814f64 - /ip4/147.75.83.83/udp/4001/quic/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb>\n   * // ]\n   * ```\n   *\n   * @returns {Promise<Array<Multiaddr>>}\n   */\n  async resolve () {\n    const resolvableProto = this.protos().find((p) => p.resolvable)\n\n    // Multiaddr is not resolvable?\n    if (!resolvableProto) {\n      return [this]\n    }\n\n    const resolver = resolvers.get(resolvableProto.name)\n    if (!resolver) {\n      throw errCode(new Error(`no available resolver for ${resolvableProto.name}`), 'ERR_NO_AVAILABLE_RESOLVER')\n    }\n\n    const addresses = await resolver(this)\n    return addresses.map((a) => new Multiaddr(a))\n  }\n\n  /**\n   * Gets a Multiaddrs node-friendly address object. Note that protocol information\n   * is left out: in Node (and most network systems) the protocol is unknowable\n   * given only the address.\n   *\n   * Has to be a ThinWaist Address, otherwise throws error\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').nodeAddress()\n   * // {family: 4, address: '127.0.0.1', port: 4001}\n   * ```\n   *\n   * @returns {{family: 4 | 6, address: string, port: number}}\n   * @throws {Error} Throws error if Multiaddr is not a Thin Waist address\n   */\n  nodeAddress () {\n    const codes = this.protoCodes()\n    const names = this.protoNames()\n    const parts = this.toString().split('/').slice(1)\n\n    if (parts.length < 4) {\n      throw new Error('multiaddr must have a valid format: \"/{ip4, ip6, dns4, dns6}/{address}/{tcp, udp}/{port}\".')\n    } else if (codes[0] !== 4 && codes[0] !== 41 && codes[0] !== 54 && codes[0] !== 55) {\n      throw new Error(`no protocol with name: \"'${names[0]}'\". Must have a valid family name: \"{ip4, ip6, dns4, dns6}\".`)\n    } else if (parts[2] !== 'tcp' && parts[2] !== 'udp') {\n      throw new Error(`no protocol with name: \"'${names[1]}'\". Must have a valid transport protocol: \"{tcp, udp}\".`)\n    }\n\n    return {\n      family: (codes[0] === 41 || codes[0] === 55) ? 6 : 4,\n      address: parts[1],\n      port: parseInt(parts[3]) // tcp or udp port\n    }\n  }\n\n  /**\n   * Returns if a Multiaddr is a Thin Waist address or not.\n   *\n   * Thin Waist is if a Multiaddr adheres to the standard combination of:\n   *\n   * `{IPv4, IPv6}/{TCP, UDP}`\n   *\n   * @example\n   * ```js\n   * const mh1 = new Multiaddr('/ip4/127.0.0.1/tcp/4001')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   * const mh2 = new Multiaddr('/ip4/192.168.2.1/tcp/5001')\n   * // <Multiaddr 04c0a80201061389 - /ip4/192.168.2.1/tcp/5001>\n   * const mh3 = mh1.encapsulate(mh2)\n   * // <Multiaddr 047f000001060fa104c0a80201061389 - /ip4/127.0.0.1/tcp/4001/ip4/192.168.2.1/tcp/5001>\n   * const mh4 = new Multiaddr('/ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a')\n   * // <Multiaddr 047f0000010607d0de039302a503221220d52ebb89d85b02a284948203a62ff28389c57c9f42beec4ec20db76a64835843 - /ip4/127.0.0.1/tcp/2000/wss/p2p-webrtc-star/p2p/QmcgpsyWgH8Y8ajJz1Cu72KnS5uo2Aa2LpzU7kinSooo2a>\n   * mh1.isThinWaistAddress()\n   * // true\n   * mh2.isThinWaistAddress()\n   * // true\n   * mh3.isThinWaistAddress()\n   * // false\n   * mh4.isThinWaistAddress()\n   * // false\n   * ```\n   *\n   * @param {Multiaddr} [addr] - Defaults to using `this` instance\n   */\n  isThinWaistAddress (addr) {\n    const protos = (addr || this).protos()\n\n    if (protos.length !== 2) {\n      return false\n    }\n\n    if (protos[0].code !== 4 && protos[0].code !== 41) {\n      return false\n    }\n    if (protos[1].code !== 6 && protos[1].code !== 273) {\n      return false\n    }\n    return true\n  }\n\n  /**\n   * Creates a Multiaddr from a node-friendly address object\n   *\n   * @example\n   * ```js\n   * Multiaddr.fromNodeAddress({address: '127.0.0.1', port: '4001'}, 'tcp')\n   * // <Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>\n   * ```\n   *\n   * @param {{family: 4 | 6, address: string, port: number}} addr\n   * @param {string} transport\n   */\n  static fromNodeAddress (addr, transport) {\n    if (!addr) { throw new Error('requires node address object') }\n    if (!transport) { throw new Error('requires transport protocol') }\n    let ip\n    switch (addr.family) {\n      case 4:\n        ip = 'ip4'\n        break\n      case 6:\n        ip = 'ip6'\n        break\n      default:\n        throw Error(`Invalid addr family. Got '${addr.family}' instead of 4 or 6`)\n    }\n    return new Multiaddr('/' + [ip, addr.address, transport, addr.port].join('/'))\n  }\n\n  /**\n   * Returns if something is a Multiaddr that is a name\n   *\n   * @param {Multiaddr} addr\n   * @returns {boolean} isName\n   */\n  static isName (addr) {\n    if (!Multiaddr.isMultiaddr(addr)) {\n      return false\n    }\n\n    // if a part of the multiaddr is resolvable, then return true\n    return addr.protos().some((proto) => proto.resolvable)\n  }\n\n  /**\n   * Check if object is a CID instance\n   *\n   * @param {any} value\n   * @returns {value is Multiaddr}\n   */\n  static isMultiaddr (value) {\n    return value instanceof Multiaddr || Boolean(value && value[symbol])\n  }\n\n  /**\n   * Returns Multiaddr as a human-readable string.\n   * For post Node.js v10.0.0.\n   * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\n   *\n   * @example\n   * ```js\n   * console.log(new Multiaddr('/ip4/127.0.0.1/tcp/4001'))\n   * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\n   * ```\n   *\n   * @returns {string}\n   */\n  [inspect] () {\n    return '<Multiaddr ' +\n    uint8ArrayToString(this.bytes, 'base16') + ' - ' +\n    codec.bytesToString(this.bytes) + '>'\n  }\n\n  /**\n   * Returns Multiaddr as a human-readable string.\n   * Fallback for pre Node.js v10.0.0.\n   * https://nodejs.org/api/deprecations.html#deprecations_dep0079_custom_inspection_function_on_objects_via_inspect\n   *\n   * @example\n   * ```js\n   * new Multiaddr('/ip4/127.0.0.1/tcp/4001').inspect()\n   * // '<Multiaddr 047f000001060fa1 - /ip4/127.0.0.1/tcp/4001>'\n   * ```\n   *\n   * @returns {string}\n   */\n  inspect () {\n    return '<Multiaddr ' +\n      uint8ArrayToString(this.bytes, 'base16') + ' - ' +\n      codec.bytesToString(this.bytes) + '>'\n  }\n}\n\n/**\n * Object containing table, names and codes of all supported protocols.\n * To get the protocol values from a Multiaddr, you can use\n * [`.protos()`](#multiaddrprotos),\n * [`.protoCodes()`](#multiaddrprotocodes) or\n * [`.protoNames()`](#multiaddrprotonames)\n *\n * @returns {{table: Array, names: Object, codes: Object}}\n */\nMultiaddr.protocols = protocols\n\nMultiaddr.resolvers = resolvers\n\n/**\n * Static factory\n *\n * @param {MultiaddrInput} addr\n */\nfunction multiaddr (addr) {\n  return new Multiaddr(addr)\n}\n\nmodule.exports = { Multiaddr, multiaddr, protocols, resolvers }\n"]},"metadata":{},"sourceType":"script"}