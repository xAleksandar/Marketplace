{"ast":null,"code":"import errCode from 'err-code';\nimport itPeekable from 'it-peekable';\nimport browserStreamToIt from 'browser-readablestream-to-it';\nimport all from 'it-all';\nimport { isBytes, isBlob, isReadableStream } from './utils.js';\nexport async function normaliseContent(input) {\n  if (isBytes(input)) {\n    return new Blob([input]);\n  }\n\n  if (typeof input === 'string' || input instanceof String) {\n    return new Blob([input.toString()]);\n  }\n\n  if (isBlob(input)) {\n    return input;\n  }\n\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input);\n  }\n\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable(input);\n    const {\n      value,\n      done\n    } = await peekable.peek();\n\n    if (done) {\n      return itToBlob(peekable);\n    }\n\n    peekable.push(value);\n\n    if (Number.isInteger(value)) {\n      return new Blob([Uint8Array.from(await all(peekable))]);\n    }\n\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      return itToBlob(peekable);\n    }\n  }\n\n  throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT');\n}\n\nasync function itToBlob(stream) {\n  const parts = [];\n\n  for await (const chunk of stream) {\n    parts.push(chunk);\n  }\n\n  return new Blob(parts);\n}","map":{"version":3,"sources":["/home/alex/Documents/gitest/Marketplace/node_modules/ipfs-core-utils/esm/src/files/normalise-content.browser.js"],"names":["errCode","itPeekable","browserStreamToIt","all","isBytes","isBlob","isReadableStream","normaliseContent","input","Blob","String","toString","Symbol","iterator","asyncIterator","peekable","value","done","peek","itToBlob","push","Number","isInteger","Uint8Array","from","Error","stream","parts","chunk"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,UAApB;AACA,OAAOC,UAAP,MAAuB,aAAvB;AACA,OAAOC,iBAAP,MAA8B,8BAA9B;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SACEC,OADF,EAEEC,MAFF,EAGEC,gBAHF,QAIO,YAJP;AAKA,OAAO,eAAeC,gBAAf,CAAgCC,KAAhC,EAAuC;AAC5C,MAAIJ,OAAO,CAACI,KAAD,CAAX,EAAoB;AAClB,WAAO,IAAIC,IAAJ,CAAS,CAACD,KAAD,CAAT,CAAP;AACD;;AACD,MAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,YAAYE,MAAlD,EAA0D;AACxD,WAAO,IAAID,IAAJ,CAAS,CAACD,KAAK,CAACG,QAAN,EAAD,CAAT,CAAP;AACD;;AACD,MAAIN,MAAM,CAACG,KAAD,CAAV,EAAmB;AACjB,WAAOA,KAAP;AACD;;AACD,MAAIF,gBAAgB,CAACE,KAAD,CAApB,EAA6B;AAC3BA,IAAAA,KAAK,GAAGN,iBAAiB,CAACM,KAAD,CAAzB;AACD;;AACD,MAAII,MAAM,CAACC,QAAP,IAAmBL,KAAnB,IAA4BI,MAAM,CAACE,aAAP,IAAwBN,KAAxD,EAA+D;AAC7D,UAAMO,QAAQ,GAAGd,UAAU,CAACO,KAAD,CAA3B;AACA,UAAM;AAACQ,MAAAA,KAAD;AAAQC,MAAAA;AAAR,QAAgB,MAAMF,QAAQ,CAACG,IAAT,EAA5B;;AACA,QAAID,IAAJ,EAAU;AACR,aAAOE,QAAQ,CAACJ,QAAD,CAAf;AACD;;AACDA,IAAAA,QAAQ,CAACK,IAAT,CAAcJ,KAAd;;AACA,QAAIK,MAAM,CAACC,SAAP,CAAiBN,KAAjB,CAAJ,EAA6B;AAC3B,aAAO,IAAIP,IAAJ,CAAS,CAACc,UAAU,CAACC,IAAX,CAAgB,MAAMrB,GAAG,CAACY,QAAD,CAAzB,CAAD,CAAT,CAAP;AACD;;AACD,QAAIX,OAAO,CAACY,KAAD,CAAP,IAAkB,OAAOA,KAAP,KAAiB,QAAnC,IAA+CA,KAAK,YAAYN,MAApE,EAA4E;AAC1E,aAAOS,QAAQ,CAACJ,QAAD,CAAf;AACD;AACF;;AACD,QAAMf,OAAO,CAAC,IAAIyB,KAAJ,CAAW,qBAAqBjB,KAAO,EAAvC,CAAD,EAA4C,sBAA5C,CAAb;AACD;;AACD,eAAeW,QAAf,CAAwBO,MAAxB,EAAgC;AAC9B,QAAMC,KAAK,GAAG,EAAd;;AACA,aAAW,MAAMC,KAAjB,IAA0BF,MAA1B,EAAkC;AAChCC,IAAAA,KAAK,CAACP,IAAN,CAAWQ,KAAX;AACD;;AACD,SAAO,IAAInB,IAAJ,CAASkB,KAAT,CAAP;AACD","sourcesContent":["import errCode from 'err-code';\nimport itPeekable from 'it-peekable';\nimport browserStreamToIt from 'browser-readablestream-to-it';\nimport all from 'it-all';\nimport {\n  isBytes,\n  isBlob,\n  isReadableStream\n} from './utils.js';\nexport async function normaliseContent(input) {\n  if (isBytes(input)) {\n    return new Blob([input]);\n  }\n  if (typeof input === 'string' || input instanceof String) {\n    return new Blob([input.toString()]);\n  }\n  if (isBlob(input)) {\n    return input;\n  }\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input);\n  }\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable(input);\n    const {value, done} = await peekable.peek();\n    if (done) {\n      return itToBlob(peekable);\n    }\n    peekable.push(value);\n    if (Number.isInteger(value)) {\n      return new Blob([Uint8Array.from(await all(peekable))]);\n    }\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      return itToBlob(peekable);\n    }\n  }\n  throw errCode(new Error(`Unexpected input: ${ input }`), 'ERR_UNEXPECTED_INPUT');\n}\nasync function itToBlob(stream) {\n  const parts = [];\n  for await (const chunk of stream) {\n    parts.push(chunk);\n  }\n  return new Blob(parts);\n}"]},"metadata":{},"sourceType":"module"}