{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createCp = configure(api => {\n  async function cp(sources, destination) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const sourceArr = Array.isArray(sources) ? sources : [sources];\n    const res = await api.post('files/cp', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: sourceArr.concat(destination).map(src => CID.asCID(src) ? `/ipfs/${src}` : src),\n        ...options\n      }),\n      headers: options.headers\n    });\n    await res.text();\n  }\n\n  return cp;\n});","map":{"version":3,"sources":["/home/alex/Documents/gitest/Marketplace/node_modules/ipfs-http-client/esm/src/files/cp.js"],"names":["CID","configure","toUrlSearchParams","createCp","api","cp","sources","destination","options","sourceArr","Array","isArray","res","post","signal","searchParams","arg","concat","map","src","asCID","headers","text"],"mappings":"AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,OAAO,MAAMC,QAAQ,GAAGF,SAAS,CAACG,GAAG,IAAI;AACvC,iBAAeC,EAAf,CAAkBC,OAAlB,EAA2BC,WAA3B,EAAsD;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACpD,UAAMC,SAAS,GAAGC,KAAK,CAACC,OAAN,CAAcL,OAAd,IAAyBA,OAAzB,GAAmC,CAACA,OAAD,CAArD;AACA,UAAMM,GAAG,GAAG,MAAMR,GAAG,CAACS,IAAJ,CAAS,UAAT,EAAqB;AACrCC,MAAAA,MAAM,EAAEN,OAAO,CAACM,MADqB;AAErCC,MAAAA,YAAY,EAAEb,iBAAiB,CAAC;AAC9Bc,QAAAA,GAAG,EAAEP,SAAS,CAACQ,MAAV,CAAiBV,WAAjB,EAA8BW,GAA9B,CAAkCC,GAAG,IAAInB,GAAG,CAACoB,KAAJ,CAAUD,GAAV,IAAkB,SAASA,GAAK,EAAhC,GAAoCA,GAA7E,CADyB;AAE9B,WAAGX;AAF2B,OAAD,CAFM;AAMrCa,MAAAA,OAAO,EAAEb,OAAO,CAACa;AANoB,KAArB,CAAlB;AAQA,UAAMT,GAAG,CAACU,IAAJ,EAAN;AACD;;AACD,SAAOjB,EAAP;AACD,CAdgC,CAA1B","sourcesContent":["import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createCp = configure(api => {\n  async function cp(sources, destination, options = {}) {\n    const sourceArr = Array.isArray(sources) ? sources : [sources];\n    const res = await api.post('files/cp', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams({\n        arg: sourceArr.concat(destination).map(src => CID.asCID(src) ? `/ipfs/${ src }` : src),\n        ...options\n      }),\n      headers: options.headers\n    });\n    await res.text();\n  }\n  return cp;\n});"]},"metadata":{},"sourceType":"module"}