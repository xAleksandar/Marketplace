{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js';\nexport const decodePin = _ref => {\n  let {\n    Name: name,\n    Status: status,\n    Cid: cid\n  } = _ref;\n  return {\n    cid: CID.parse(cid),\n    name,\n    status\n  };\n};\nexport const encodeService = service => {\n  if (typeof service === 'string' && service !== '') {\n    return service;\n  } else {\n    throw new TypeError('service name must be passed');\n  }\n};\nexport const encodeCID = cid => {\n  if (CID.asCID(cid)) {\n    return cid.toString();\n  } else {\n    throw new TypeError(`CID instance expected instead of ${typeof cid}`);\n  }\n};\nexport const encodeQuery = _ref2 => {\n  let {\n    service,\n    cid,\n    name,\n    status,\n    all\n  } = _ref2;\n  const query = toUrlSearchParams({\n    service: encodeService(service),\n    name,\n    force: all ? true : undefined\n  });\n\n  if (cid) {\n    for (const value of cid) {\n      query.append('cid', encodeCID(value));\n    }\n  }\n\n  if (status) {\n    for (const value of status) {\n      query.append('status', value);\n    }\n  }\n\n  return query;\n};\nexport const encodeAddParams = _ref3 => {\n  let {\n    cid,\n    service,\n    background,\n    name,\n    origins\n  } = _ref3;\n  const params = toUrlSearchParams({\n    arg: encodeCID(cid),\n    service: encodeService(service),\n    name,\n    background: background ? true : undefined\n  });\n\n  if (origins) {\n    for (const origin of origins) {\n      params.append('origin', origin.toString());\n    }\n  }\n\n  return params;\n};","map":{"version":3,"sources":["/home/alex/Documents/gitest/Marketplace/node_modules/ipfs-http-client/esm/src/pin/remote/utils.js"],"names":["CID","toUrlSearchParams","decodePin","Name","name","Status","status","Cid","cid","parse","encodeService","service","TypeError","encodeCID","asCID","toString","encodeQuery","all","query","force","undefined","value","append","encodeAddParams","background","origins","params","arg","origin"],"mappings":"AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,iBAAT,QAAkC,mCAAlC;AACA,OAAO,MAAMC,SAAS,GAAG,QAInB;AAAA,MAJoB;AACxBC,IAAAA,IAAI,EAAEC,IADkB;AAExBC,IAAAA,MAAM,EAAEC,MAFgB;AAGxBC,IAAAA,GAAG,EAAEC;AAHmB,GAIpB;AACJ,SAAO;AACLA,IAAAA,GAAG,EAAER,GAAG,CAACS,KAAJ,CAAUD,GAAV,CADA;AAELJ,IAAAA,IAFK;AAGLE,IAAAA;AAHK,GAAP;AAKD,CAVM;AAWP,OAAO,MAAMI,aAAa,GAAGC,OAAO,IAAI;AACtC,MAAI,OAAOA,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,KAAK,EAA/C,EAAmD;AACjD,WAAOA,OAAP;AACD,GAFD,MAEO;AACL,UAAM,IAAIC,SAAJ,CAAc,6BAAd,CAAN;AACD;AACF,CANM;AAOP,OAAO,MAAMC,SAAS,GAAGL,GAAG,IAAI;AAC9B,MAAIR,GAAG,CAACc,KAAJ,CAAUN,GAAV,CAAJ,EAAoB;AAClB,WAAOA,GAAG,CAACO,QAAJ,EAAP;AACD,GAFD,MAEO;AACL,UAAM,IAAIH,SAAJ,CAAe,oCAAoC,OAAOJ,GAAK,EAA/D,CAAN;AACD;AACF,CANM;AAOP,OAAO,MAAMQ,WAAW,GAAG,SAAuC;AAAA,MAAtC;AAACL,IAAAA,OAAD;AAAUH,IAAAA,GAAV;AAAeJ,IAAAA,IAAf;AAAqBE,IAAAA,MAArB;AAA6BW,IAAAA;AAA7B,GAAsC;AAChE,QAAMC,KAAK,GAAGjB,iBAAiB,CAAC;AAC9BU,IAAAA,OAAO,EAAED,aAAa,CAACC,OAAD,CADQ;AAE9BP,IAAAA,IAF8B;AAG9Be,IAAAA,KAAK,EAAEF,GAAG,GAAG,IAAH,GAAUG;AAHU,GAAD,CAA/B;;AAKA,MAAIZ,GAAJ,EAAS;AACP,SAAK,MAAMa,KAAX,IAAoBb,GAApB,EAAyB;AACvBU,MAAAA,KAAK,CAACI,MAAN,CAAa,KAAb,EAAoBT,SAAS,CAACQ,KAAD,CAA7B;AACD;AACF;;AACD,MAAIf,MAAJ,EAAY;AACV,SAAK,MAAMe,KAAX,IAAoBf,MAApB,EAA4B;AAC1BY,MAAAA,KAAK,CAACI,MAAN,CAAa,QAAb,EAAuBD,KAAvB;AACD;AACF;;AACD,SAAOH,KAAP;AACD,CAjBM;AAkBP,OAAO,MAAMK,eAAe,GAAG,SAA+C;AAAA,MAA9C;AAACf,IAAAA,GAAD;AAAMG,IAAAA,OAAN;AAAea,IAAAA,UAAf;AAA2BpB,IAAAA,IAA3B;AAAiCqB,IAAAA;AAAjC,GAA8C;AAC5E,QAAMC,MAAM,GAAGzB,iBAAiB,CAAC;AAC/B0B,IAAAA,GAAG,EAAEd,SAAS,CAACL,GAAD,CADiB;AAE/BG,IAAAA,OAAO,EAAED,aAAa,CAACC,OAAD,CAFS;AAG/BP,IAAAA,IAH+B;AAI/BoB,IAAAA,UAAU,EAAEA,UAAU,GAAG,IAAH,GAAUJ;AAJD,GAAD,CAAhC;;AAMA,MAAIK,OAAJ,EAAa;AACX,SAAK,MAAMG,MAAX,IAAqBH,OAArB,EAA8B;AAC5BC,MAAAA,MAAM,CAACJ,MAAP,CAAc,QAAd,EAAwBM,MAAM,CAACb,QAAP,EAAxB;AACD;AACF;;AACD,SAAOW,MAAP;AACD,CAbM","sourcesContent":["import { CID } from 'multiformats/cid';\nimport { toUrlSearchParams } from '../../lib/to-url-search-params.js';\nexport const decodePin = ({\n  Name: name,\n  Status: status,\n  Cid: cid\n}) => {\n  return {\n    cid: CID.parse(cid),\n    name,\n    status\n  };\n};\nexport const encodeService = service => {\n  if (typeof service === 'string' && service !== '') {\n    return service;\n  } else {\n    throw new TypeError('service name must be passed');\n  }\n};\nexport const encodeCID = cid => {\n  if (CID.asCID(cid)) {\n    return cid.toString();\n  } else {\n    throw new TypeError(`CID instance expected instead of ${ typeof cid }`);\n  }\n};\nexport const encodeQuery = ({service, cid, name, status, all}) => {\n  const query = toUrlSearchParams({\n    service: encodeService(service),\n    name,\n    force: all ? true : undefined\n  });\n  if (cid) {\n    for (const value of cid) {\n      query.append('cid', encodeCID(value));\n    }\n  }\n  if (status) {\n    for (const value of status) {\n      query.append('status', value);\n    }\n  }\n  return query;\n};\nexport const encodeAddParams = ({cid, service, background, name, origins}) => {\n  const params = toUrlSearchParams({\n    arg: encodeCID(cid),\n    service: encodeService(service),\n    name,\n    background: background ? true : undefined\n  });\n  if (origins) {\n    for (const origin of origins) {\n      params.append('origin', origin.toString());\n    }\n  }\n  return params;\n};"]},"metadata":{},"sourceType":"module"}