{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"./utils\");\n\nfunction fromSplit(split) {\n  const [protectedHeader, encrypted_key, iv, ciphertext, tag] = split;\n  const jwe = {\n    ciphertext,\n    iv,\n    protected: protectedHeader,\n    tag\n  };\n  if (encrypted_key) jwe.recipients = [{\n    encrypted_key\n  }];\n  return jwe;\n}\n\nfunction encodeRecipient(recipient) {\n  const encRec = {};\n  if (recipient.encrypted_key) encRec.encrypted_key = utils_1.fromBase64url(recipient.encrypted_key);\n  if (recipient.header) encRec.header = recipient.header;\n  return encRec;\n}\n\nfunction encode(jwe) {\n  const encJwe = {\n    ciphertext: utils_1.fromBase64url(jwe.ciphertext),\n    protected: utils_1.fromBase64url(jwe.protected),\n    iv: utils_1.fromBase64url(jwe.iv),\n    tag: utils_1.fromBase64url(jwe.tag)\n  };\n  if (jwe.aad) encJwe.aad = utils_1.fromBase64url(jwe.aad);\n  if (jwe.recipients) encJwe.recipients = jwe.recipients.map(encodeRecipient);\n  if (jwe.unprotected) encJwe.unprotected = jwe.unprotected;\n  return encJwe;\n}\n\nfunction decodeRecipient(encoded) {\n  const recipient = {};\n  if (encoded.encrypted_key) recipient.encrypted_key = utils_1.toBase64url(encoded.encrypted_key);\n  if (encoded.header) recipient.header = encoded.header;\n  return recipient;\n}\n\nfunction decode(encoded) {\n  const jwe = {\n    ciphertext: utils_1.toBase64url(encoded.ciphertext),\n    protected: utils_1.toBase64url(encoded.protected),\n    iv: utils_1.toBase64url(encoded.iv),\n    tag: utils_1.toBase64url(encoded.tag)\n  };\n  if (encoded.aad) jwe.aad = utils_1.toBase64url(encoded.aad);\n  if (encoded.recipients) jwe.recipients = encoded.recipients.map(decodeRecipient);\n  if (encoded.unprotected) jwe.unprotected = encoded.unprotected;\n  return jwe;\n}\n\nexports.default = {\n  fromSplit,\n  decode,\n  encode\n};","map":{"version":3,"mappings":";;;;;;AAAA;;AAgCA,SAASA,SAAT,CAAmBC,KAAnB,EAAuC;AACrC,QAAM,CAACC,eAAD,EAAkBC,aAAlB,EAAiCC,EAAjC,EAAqCC,UAArC,EAAiDC,GAAjD,IAAwDL,KAA9D;AACA,QAAMM,GAAG,GAAW;AAClBF,cADkB;AAElBD,MAFkB;AAGlBI,aAAS,EAAEN,eAHO;AAIlBI;AAJkB,GAApB;AAMA,MAAIH,aAAJ,EAAmBI,GAAG,CAACE,UAAJ,GAAiB,CAAC;AAAEN;AAAF,GAAD,CAAjB;AACnB,SAAOI,GAAP;AACD;;AAED,SAASG,eAAT,CAAyBC,SAAzB,EAAgD;AAC9C,QAAMC,MAAM,GAAqB,EAAjC;AACA,MAAID,SAAS,CAACR,aAAd,EAA6BS,MAAM,CAACT,aAAP,GAAuBU,sBAAcF,SAAS,CAACR,aAAxB,CAAvB;AAC7B,MAAIQ,SAAS,CAACG,MAAd,EAAsBF,MAAM,CAACE,MAAP,GAAgBH,SAAS,CAACG,MAA1B;AACtB,SAAOF,MAAP;AACD;;AAED,SAASG,MAAT,CAAgBR,GAAhB,EAA2B;AACzB,QAAMS,MAAM,GAAe;AACzBX,cAAU,EAAEQ,sBAAcN,GAAG,CAACF,UAAlB,CADa;AAEzBG,aAAS,EAAEK,sBAAcN,GAAG,CAACC,SAAlB,CAFc;AAGzBJ,MAAE,EAAES,sBAAcN,GAAG,CAACH,EAAlB,CAHqB;AAIzBE,OAAG,EAAEO,sBAAcN,GAAG,CAACD,GAAlB;AAJoB,GAA3B;AAMA,MAAIC,GAAG,CAACU,GAAR,EAAaD,MAAM,CAACC,GAAP,GAAaJ,sBAAcN,GAAG,CAACU,GAAlB,CAAb;AACb,MAAIV,GAAG,CAACE,UAAR,EAAoBO,MAAM,CAACP,UAAP,GAAoBF,GAAG,CAACE,UAAJ,CAAeS,GAAf,CAAmBR,eAAnB,CAApB;AACpB,MAAIH,GAAG,CAACY,WAAR,EAAqBH,MAAM,CAACG,WAAP,GAAqBZ,GAAG,CAACY,WAAzB;AACrB,SAAOH,MAAP;AACD;;AAED,SAASI,eAAT,CAAyBC,OAAzB,EAAkD;AAChD,QAAMV,SAAS,GAAiB,EAAhC;AACA,MAAIU,OAAO,CAAClB,aAAZ,EAA2BQ,SAAS,CAACR,aAAV,GAA0BU,oBAAYQ,OAAO,CAAClB,aAApB,CAA1B;AAC3B,MAAIkB,OAAO,CAACP,MAAZ,EAAoBH,SAAS,CAACG,MAAV,GAAmBO,OAAO,CAACP,MAA3B;AACpB,SAAOH,SAAP;AACD;;AAED,SAASW,MAAT,CAAgBD,OAAhB,EAAmC;AACjC,QAAMd,GAAG,GAAW;AAClBF,cAAU,EAAEQ,oBAAYQ,OAAO,CAAChB,UAApB,CADM;AAElBG,aAAS,EAAEK,oBAAYQ,OAAO,CAACb,SAApB,CAFO;AAGlBJ,MAAE,EAAES,oBAAYQ,OAAO,CAACjB,EAApB,CAHc;AAIlBE,OAAG,EAAEO,oBAAYQ,OAAO,CAACf,GAApB;AAJa,GAApB;AAMA,MAAIe,OAAO,CAACJ,GAAZ,EAAiBV,GAAG,CAACU,GAAJ,GAAUJ,oBAAYQ,OAAO,CAACJ,GAApB,CAAV;AACjB,MAAII,OAAO,CAACZ,UAAZ,EAAwBF,GAAG,CAACE,UAAJ,GAAiBY,OAAO,CAACZ,UAAR,CAAmBS,GAAnB,CAAuBE,eAAvB,CAAjB;AACxB,MAAIC,OAAO,CAACF,WAAZ,EAAyBZ,GAAG,CAACY,WAAJ,GAAkBE,OAAO,CAACF,WAA1B;AACzB,SAAOZ,GAAP;AACD;;AAEDgB,kBAAe;AACbvB,WADa;AAEbsB,QAFa;AAGbP;AAHa,CAAf","names":["fromSplit","split","protectedHeader","encrypted_key","iv","ciphertext","tag","jwe","protected","recipients","encodeRecipient","recipient","encRec","utils_1","header","encode","encJwe","aad","map","unprotected","decodeRecipient","encoded","decode","exports"],"sources":["/home/alex/Documents/gitest/Marketplace/node_modules/dag-jose/src/encryption.ts"],"sourcesContent":["import { fromBase64url, toBase64url } from './utils'\n\ninterface JWERecipient {\n  encrypted_key?: string\n  header?: Record<string, any>\n}\n\nexport interface DagJWE {\n  aad?: string\n  ciphertext: string\n  iv: string\n  protected: string\n  recipients?: Array<JWERecipient>\n  tag: string\n  unprotected?: Record<string, any>\n}\n\ninterface EncodedRecipient {\n  encrypted_key?: Uint8Array\n  header?: Record<string, any>\n}\n\nexport interface EncodedJWE {\n  aad?: Uint8Array\n  ciphertext: Uint8Array\n  iv: Uint8Array\n  protected: Uint8Array\n  recipients?: Array<EncodedRecipient>\n  tag: Uint8Array\n  unprotected?: Record<string, any>\n}\n\nfunction fromSplit(split: Array<string>): DagJWE {\n  const [protectedHeader, encrypted_key, iv, ciphertext, tag] = split\n  const jwe: DagJWE = {\n    ciphertext,\n    iv,\n    protected: protectedHeader,\n    tag,\n  }\n  if (encrypted_key) jwe.recipients = [{ encrypted_key }]\n  return jwe\n}\n\nfunction encodeRecipient(recipient: JWERecipient): EncodedRecipient {\n  const encRec: EncodedRecipient = {}\n  if (recipient.encrypted_key) encRec.encrypted_key = fromBase64url(recipient.encrypted_key)\n  if (recipient.header) encRec.header = recipient.header\n  return encRec\n}\n\nfunction encode(jwe: DagJWE): EncodedJWE {\n  const encJwe: EncodedJWE = {\n    ciphertext: fromBase64url(jwe.ciphertext),\n    protected: fromBase64url(jwe.protected),\n    iv: fromBase64url(jwe.iv),\n    tag: fromBase64url(jwe.tag),\n  }\n  if (jwe.aad) encJwe.aad = fromBase64url(jwe.aad)\n  if (jwe.recipients) encJwe.recipients = jwe.recipients.map(encodeRecipient)\n  if (jwe.unprotected) encJwe.unprotected = jwe.unprotected\n  return encJwe\n}\n\nfunction decodeRecipient(encoded: EncodedRecipient): JWERecipient {\n  const recipient: JWERecipient = {}\n  if (encoded.encrypted_key) recipient.encrypted_key = toBase64url(encoded.encrypted_key)\n  if (encoded.header) recipient.header = encoded.header\n  return recipient\n}\n\nfunction decode(encoded: EncodedJWE): DagJWE {\n  const jwe: DagJWE = {\n    ciphertext: toBase64url(encoded.ciphertext),\n    protected: toBase64url(encoded.protected),\n    iv: toBase64url(encoded.iv),\n    tag: toBase64url(encoded.tag),\n  }\n  if (encoded.aad) jwe.aad = toBase64url(encoded.aad)\n  if (encoded.recipients) jwe.recipients = encoded.recipients.map(decodeRecipient)\n  if (encoded.unprotected) jwe.unprotected = encoded.unprotected\n  return jwe\n}\n\nexport default {\n  fromSplit,\n  decode,\n  encode,\n}\n"]},"metadata":{},"sourceType":"script"}