{"ast":null,"code":"import * as varint from './varint.js';\nimport * as Digest from './hashes/digest.js';\nimport { base58btc } from './bases/base58.js';\nimport { base32 } from './bases/base32.js';\nimport { coerce } from './bytes.js';\nexport class CID {\n  constructor(version, code, multihash, bytes) {\n    this.code = code;\n    this.version = version;\n    this.multihash = multihash;\n    this.bytes = bytes;\n    this.byteOffset = bytes.byteOffset;\n    this.byteLength = bytes.byteLength;\n    this.asCID = this;\n    this._baseCache = new Map();\n    Object.defineProperties(this, {\n      byteOffset: hidden,\n      byteLength: hidden,\n      code: readonly,\n      version: readonly,\n      multihash: readonly,\n      bytes: readonly,\n      _baseCache: hidden,\n      asCID: hidden\n    });\n  }\n\n  toV0() {\n    switch (this.version) {\n      case 0:\n        {\n          return this;\n        }\n\n      default:\n        {\n          const {\n            code,\n            multihash\n          } = this;\n\n          if (code !== DAG_PB_CODE) {\n            throw new Error('Cannot convert a non dag-pb CID to CIDv0');\n          }\n\n          if (multihash.code !== SHA_256_CODE) {\n            throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');\n          }\n\n          return CID.createV0(multihash);\n        }\n    }\n  }\n\n  toV1() {\n    switch (this.version) {\n      case 0:\n        {\n          const {\n            code,\n            digest\n          } = this.multihash;\n          const multihash = Digest.create(code, digest);\n          return CID.createV1(this.code, multihash);\n        }\n\n      case 1:\n        {\n          return this;\n        }\n\n      default:\n        {\n          throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`);\n        }\n    }\n  }\n\n  equals(other) {\n    return other && this.code === other.code && this.version === other.version && Digest.equals(this.multihash, other.multihash);\n  }\n\n  toString(base) {\n    const {\n      bytes,\n      version,\n      _baseCache\n    } = this;\n\n    switch (version) {\n      case 0:\n        return toStringV0(bytes, _baseCache, base || base58btc.encoder);\n\n      default:\n        return toStringV1(bytes, _baseCache, base || base32.encoder);\n    }\n  }\n\n  toJSON() {\n    return {\n      code: this.code,\n      version: this.version,\n      hash: this.multihash.bytes\n    };\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'CID';\n  }\n\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return 'CID(' + this.toString() + ')';\n  }\n\n  static isCID(value) {\n    deprecate(/^0\\.0/, IS_CID_DEPRECATION);\n    return !!(value && (value[cidSymbol] || value.asCID === value));\n  }\n\n  get toBaseEncodedString() {\n    throw new Error('Deprecated, use .toString()');\n  }\n\n  get codec() {\n    throw new Error('\"codec\" property is deprecated, use integer \"code\" property instead');\n  }\n\n  get buffer() {\n    throw new Error('Deprecated .buffer property, use .bytes to get Uint8Array instead');\n  }\n\n  get multibaseName() {\n    throw new Error('\"multibaseName\" property is deprecated');\n  }\n\n  get prefix() {\n    throw new Error('\"prefix\" property is deprecated');\n  }\n\n  static asCID(value) {\n    if (value instanceof CID) {\n      return value;\n    } else if (value != null && value.asCID === value) {\n      const {\n        version,\n        code,\n        multihash,\n        bytes\n      } = value;\n      return new CID(version, code, multihash, bytes || encodeCID(version, code, multihash.bytes));\n    } else if (value != null && value[cidSymbol] === true) {\n      const {\n        version,\n        multihash,\n        code\n      } = value;\n      const digest = Digest.decode(multihash);\n      return CID.create(version, code, digest);\n    } else {\n      return null;\n    }\n  }\n\n  static create(version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported');\n    }\n\n    switch (version) {\n      case 0:\n        {\n          if (code !== DAG_PB_CODE) {\n            throw new Error(`Version 0 CID must use dag-pb (code: ${DAG_PB_CODE}) block encoding`);\n          } else {\n            return new CID(version, code, digest, digest.bytes);\n          }\n        }\n\n      case 1:\n        {\n          const bytes = encodeCID(version, code, digest.bytes);\n          return new CID(version, code, digest, bytes);\n        }\n\n      default:\n        {\n          throw new Error('Invalid version');\n        }\n    }\n  }\n\n  static createV0(digest) {\n    return CID.create(0, DAG_PB_CODE, digest);\n  }\n\n  static createV1(code, digest) {\n    return CID.create(1, code, digest);\n  }\n\n  static decode(bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes);\n\n    if (remainder.length) {\n      throw new Error('Incorrect length');\n    }\n\n    return cid;\n  }\n\n  static decodeFirst(bytes) {\n    const specs = CID.inspectBytes(bytes);\n    const prefixSize = specs.size - specs.multihashSize;\n    const multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));\n\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length');\n    }\n\n    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);\n    const digest = new Digest.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);\n    const cid = specs.version === 0 ? CID.createV0(digest) : CID.createV1(specs.codec, digest);\n    return [cid, bytes.subarray(specs.size)];\n  }\n\n  static inspectBytes(initialBytes) {\n    let offset = 0;\n\n    const next = () => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset));\n      offset += length;\n      return i;\n    };\n\n    let version = next();\n    let codec = DAG_PB_CODE;\n\n    if (version === 18) {\n      version = 0;\n      offset = 0;\n    } else if (version === 1) {\n      codec = next();\n    }\n\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${version}`);\n    }\n\n    const prefixSize = offset;\n    const multihashCode = next();\n    const digestSize = next();\n    const size = offset + digestSize;\n    const multihashSize = size - prefixSize;\n    return {\n      version,\n      codec,\n      multihashCode,\n      digestSize,\n      multihashSize,\n      size\n    };\n  }\n\n  static parse(source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base);\n    const cid = CID.decode(bytes);\n\n    cid._baseCache.set(prefix, source);\n\n    return cid;\n  }\n\n}\n\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n    case 'Q':\n      {\n        const decoder = base || base58btc;\n        return [base58btc.prefix, decoder.decode(`${base58btc.prefix}${source}`)];\n      }\n\n    case base58btc.prefix:\n      {\n        const decoder = base || base58btc;\n        return [base58btc.prefix, decoder.decode(source)];\n      }\n\n    case base32.prefix:\n      {\n        const decoder = base || base32;\n        return [base32.prefix, decoder.decode(source)];\n      }\n\n    default:\n      {\n        if (base == null) {\n          throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');\n        }\n\n        return [source[0], base.decode(source)];\n      }\n  }\n};\n\nconst toStringV0 = (bytes, cache, base) => {\n  const {\n    prefix\n  } = base;\n\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${base.name} encoding`);\n  }\n\n  const cid = cache.get(prefix);\n\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\n\nconst toStringV1 = (bytes, cache, base) => {\n  const {\n    prefix\n  } = base;\n  const cid = cache.get(prefix);\n\n  if (cid == null) {\n    const cid = base.encode(bytes);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\n\nconst DAG_PB_CODE = 112;\nconst SHA_256_CODE = 18;\n\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = varint.encodingLength(version);\n  const hashOffset = codeOffset + varint.encodingLength(code);\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength);\n  varint.encodeTo(version, bytes, 0);\n  varint.encodeTo(code, bytes, codeOffset);\n  bytes.set(multihash, hashOffset);\n  return bytes;\n};\n\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID');\nconst readonly = {\n  writable: false,\n  configurable: false,\n  enumerable: true\n};\nconst hidden = {\n  writable: false,\n  enumerable: false,\n  configurable: false\n};\nconst version = '0.0.0-dev';\n\nconst deprecate = (range, message) => {\n  if (range.test(version)) {\n    console.warn(message);\n  } else {\n    throw new Error(message);\n  }\n};\n\nconst IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.\nFollowing code pattern:\n\nif (CID.isCID(value)) {\n  doSomethingWithCID(value)\n}\n\nIs replaced with:\n\nconst cid = CID.asCID(value)\nif (cid) {\n  // Make sure to use cid instead of value\n  doSomethingWithCID(cid)\n}\n`;","map":{"version":3,"sources":["/home/alex/Documents/gitest/Marketplace/node_modules/multiformats/esm/src/cid.js"],"names":["varint","Digest","base58btc","base32","coerce","CID","constructor","version","code","multihash","bytes","byteOffset","byteLength","asCID","_baseCache","Map","Object","defineProperties","hidden","readonly","toV0","DAG_PB_CODE","Error","SHA_256_CODE","createV0","toV1","digest","create","createV1","equals","other","toString","base","toStringV0","encoder","toStringV1","toJSON","hash","Symbol","toStringTag","for","isCID","value","deprecate","IS_CID_DEPRECATION","cidSymbol","toBaseEncodedString","codec","buffer","multibaseName","prefix","encodeCID","decode","cid","remainder","decodeFirst","length","specs","inspectBytes","prefixSize","size","multihashSize","multihashBytes","subarray","digestBytes","digestSize","multihashCode","initialBytes","offset","next","i","RangeError","parse","source","parseCIDtoBytes","set","decoder","cache","name","get","encode","slice","codeOffset","encodingLength","hashOffset","Uint8Array","encodeTo","writable","configurable","enumerable","range","message","test","console","warn"],"mappings":"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","sourcesContent":["import * as varint from './varint.js';\nimport * as Digest from './hashes/digest.js';\nimport { base58btc } from './bases/base58.js';\nimport { base32 } from './bases/base32.js';\nimport { coerce } from './bytes.js';\nexport class CID {\n  constructor(version, code, multihash, bytes) {\n    this.code = code;\n    this.version = version;\n    this.multihash = multihash;\n    this.bytes = bytes;\n    this.byteOffset = bytes.byteOffset;\n    this.byteLength = bytes.byteLength;\n    this.asCID = this;\n    this._baseCache = new Map();\n    Object.defineProperties(this, {\n      byteOffset: hidden,\n      byteLength: hidden,\n      code: readonly,\n      version: readonly,\n      multihash: readonly,\n      bytes: readonly,\n      _baseCache: hidden,\n      asCID: hidden\n    });\n  }\n  toV0() {\n    switch (this.version) {\n    case 0: {\n        return this;\n      }\n    default: {\n        const {code, multihash} = this;\n        if (code !== DAG_PB_CODE) {\n          throw new Error('Cannot convert a non dag-pb CID to CIDv0');\n        }\n        if (multihash.code !== SHA_256_CODE) {\n          throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0');\n        }\n        return CID.createV0(multihash);\n      }\n    }\n  }\n  toV1() {\n    switch (this.version) {\n    case 0: {\n        const {code, digest} = this.multihash;\n        const multihash = Digest.create(code, digest);\n        return CID.createV1(this.code, multihash);\n      }\n    case 1: {\n        return this;\n      }\n    default: {\n        throw Error(`Can not convert CID version ${ this.version } to version 0. This is a bug please report`);\n      }\n    }\n  }\n  equals(other) {\n    return other && this.code === other.code && this.version === other.version && Digest.equals(this.multihash, other.multihash);\n  }\n  toString(base) {\n    const {bytes, version, _baseCache} = this;\n    switch (version) {\n    case 0:\n      return toStringV0(bytes, _baseCache, base || base58btc.encoder);\n    default:\n      return toStringV1(bytes, _baseCache, base || base32.encoder);\n    }\n  }\n  toJSON() {\n    return {\n      code: this.code,\n      version: this.version,\n      hash: this.multihash.bytes\n    };\n  }\n  get [Symbol.toStringTag]() {\n    return 'CID';\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return 'CID(' + this.toString() + ')';\n  }\n  static isCID(value) {\n    deprecate(/^0\\.0/, IS_CID_DEPRECATION);\n    return !!(value && (value[cidSymbol] || value.asCID === value));\n  }\n  get toBaseEncodedString() {\n    throw new Error('Deprecated, use .toString()');\n  }\n  get codec() {\n    throw new Error('\"codec\" property is deprecated, use integer \"code\" property instead');\n  }\n  get buffer() {\n    throw new Error('Deprecated .buffer property, use .bytes to get Uint8Array instead');\n  }\n  get multibaseName() {\n    throw new Error('\"multibaseName\" property is deprecated');\n  }\n  get prefix() {\n    throw new Error('\"prefix\" property is deprecated');\n  }\n  static asCID(value) {\n    if (value instanceof CID) {\n      return value;\n    } else if (value != null && value.asCID === value) {\n      const {version, code, multihash, bytes} = value;\n      return new CID(version, code, multihash, bytes || encodeCID(version, code, multihash.bytes));\n    } else if (value != null && value[cidSymbol] === true) {\n      const {version, multihash, code} = value;\n      const digest = Digest.decode(multihash);\n      return CID.create(version, code, digest);\n    } else {\n      return null;\n    }\n  }\n  static create(version, code, digest) {\n    if (typeof code !== 'number') {\n      throw new Error('String codecs are no longer supported');\n    }\n    switch (version) {\n    case 0: {\n        if (code !== DAG_PB_CODE) {\n          throw new Error(`Version 0 CID must use dag-pb (code: ${ DAG_PB_CODE }) block encoding`);\n        } else {\n          return new CID(version, code, digest, digest.bytes);\n        }\n      }\n    case 1: {\n        const bytes = encodeCID(version, code, digest.bytes);\n        return new CID(version, code, digest, bytes);\n      }\n    default: {\n        throw new Error('Invalid version');\n      }\n    }\n  }\n  static createV0(digest) {\n    return CID.create(0, DAG_PB_CODE, digest);\n  }\n  static createV1(code, digest) {\n    return CID.create(1, code, digest);\n  }\n  static decode(bytes) {\n    const [cid, remainder] = CID.decodeFirst(bytes);\n    if (remainder.length) {\n      throw new Error('Incorrect length');\n    }\n    return cid;\n  }\n  static decodeFirst(bytes) {\n    const specs = CID.inspectBytes(bytes);\n    const prefixSize = specs.size - specs.multihashSize;\n    const multihashBytes = coerce(bytes.subarray(prefixSize, prefixSize + specs.multihashSize));\n    if (multihashBytes.byteLength !== specs.multihashSize) {\n      throw new Error('Incorrect length');\n    }\n    const digestBytes = multihashBytes.subarray(specs.multihashSize - specs.digestSize);\n    const digest = new Digest.Digest(specs.multihashCode, specs.digestSize, digestBytes, multihashBytes);\n    const cid = specs.version === 0 ? CID.createV0(digest) : CID.createV1(specs.codec, digest);\n    return [\n      cid,\n      bytes.subarray(specs.size)\n    ];\n  }\n  static inspectBytes(initialBytes) {\n    let offset = 0;\n    const next = () => {\n      const [i, length] = varint.decode(initialBytes.subarray(offset));\n      offset += length;\n      return i;\n    };\n    let version = next();\n    let codec = DAG_PB_CODE;\n    if (version === 18) {\n      version = 0;\n      offset = 0;\n    } else if (version === 1) {\n      codec = next();\n    }\n    if (version !== 0 && version !== 1) {\n      throw new RangeError(`Invalid CID version ${ version }`);\n    }\n    const prefixSize = offset;\n    const multihashCode = next();\n    const digestSize = next();\n    const size = offset + digestSize;\n    const multihashSize = size - prefixSize;\n    return {\n      version,\n      codec,\n      multihashCode,\n      digestSize,\n      multihashSize,\n      size\n    };\n  }\n  static parse(source, base) {\n    const [prefix, bytes] = parseCIDtoBytes(source, base);\n    const cid = CID.decode(bytes);\n    cid._baseCache.set(prefix, source);\n    return cid;\n  }\n}\nconst parseCIDtoBytes = (source, base) => {\n  switch (source[0]) {\n  case 'Q': {\n      const decoder = base || base58btc;\n      return [\n        base58btc.prefix,\n        decoder.decode(`${ base58btc.prefix }${ source }`)\n      ];\n    }\n  case base58btc.prefix: {\n      const decoder = base || base58btc;\n      return [\n        base58btc.prefix,\n        decoder.decode(source)\n      ];\n    }\n  case base32.prefix: {\n      const decoder = base || base32;\n      return [\n        base32.prefix,\n        decoder.decode(source)\n      ];\n    }\n  default: {\n      if (base == null) {\n        throw Error('To parse non base32 or base58btc encoded CID multibase decoder must be provided');\n      }\n      return [\n        source[0],\n        base.decode(source)\n      ];\n    }\n  }\n};\nconst toStringV0 = (bytes, cache, base) => {\n  const {prefix} = base;\n  if (prefix !== base58btc.prefix) {\n    throw Error(`Cannot string encode V0 in ${ base.name } encoding`);\n  }\n  const cid = cache.get(prefix);\n  if (cid == null) {\n    const cid = base.encode(bytes).slice(1);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\nconst toStringV1 = (bytes, cache, base) => {\n  const {prefix} = base;\n  const cid = cache.get(prefix);\n  if (cid == null) {\n    const cid = base.encode(bytes);\n    cache.set(prefix, cid);\n    return cid;\n  } else {\n    return cid;\n  }\n};\nconst DAG_PB_CODE = 112;\nconst SHA_256_CODE = 18;\nconst encodeCID = (version, code, multihash) => {\n  const codeOffset = varint.encodingLength(version);\n  const hashOffset = codeOffset + varint.encodingLength(code);\n  const bytes = new Uint8Array(hashOffset + multihash.byteLength);\n  varint.encodeTo(version, bytes, 0);\n  varint.encodeTo(code, bytes, codeOffset);\n  bytes.set(multihash, hashOffset);\n  return bytes;\n};\nconst cidSymbol = Symbol.for('@ipld/js-cid/CID');\nconst readonly = {\n  writable: false,\n  configurable: false,\n  enumerable: true\n};\nconst hidden = {\n  writable: false,\n  enumerable: false,\n  configurable: false\n};\nconst version = '0.0.0-dev';\nconst deprecate = (range, message) => {\n  if (range.test(version)) {\n    console.warn(message);\n  } else {\n    throw new Error(message);\n  }\n};\nconst IS_CID_DEPRECATION = `CID.isCID(v) is deprecated and will be removed in the next major release.\nFollowing code pattern:\n\nif (CID.isCID(value)) {\n  doSomethingWithCID(value)\n}\n\nIs replaced with:\n\nconst cid = CID.asCID(value)\nif (cid) {\n  // Make sure to use cid instead of value\n  doSomethingWithCID(cid)\n}\n`;"]},"metadata":{},"sourceType":"module"}