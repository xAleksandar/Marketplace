{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport errCode from 'err-code';\nexport async function* resolve(cid, path, codecs, getBlock, options) {\n  const load = async cid => {\n    const codec = await codecs.getCodec(cid.code);\n    const block = await getBlock(cid, options);\n    return codec.decode(block);\n  };\n\n  const parts = path.split('/').filter(Boolean);\n  let value = await load(cid);\n  let lastCid = cid;\n\n  while (parts.length) {\n    const key = parts.shift();\n\n    if (!key) {\n      throw errCode(new Error(`Could not resolve path \"${path}\"`), 'ERR_INVALID_PATH');\n    }\n\n    if (Object.prototype.hasOwnProperty.call(value, key)) {\n      value = value[key];\n      yield {\n        value,\n        remainderPath: parts.join('/')\n      };\n    } else {\n      throw errCode(new Error(`no link named \"${key}\" under ${lastCid}`), 'ERR_NO_LINK');\n    }\n\n    const cid = CID.asCID(value);\n\n    if (cid) {\n      lastCid = cid;\n      value = await load(value);\n    }\n  }\n\n  yield {\n    value,\n    remainderPath: ''\n  };\n}","map":{"version":3,"sources":["/home/alex/Documents/gitest/Marketplace/node_modules/ipfs-http-client/esm/src/lib/resolve.js"],"names":["CID","errCode","resolve","cid","path","codecs","getBlock","options","load","codec","getCodec","code","block","decode","parts","split","filter","Boolean","value","lastCid","length","key","shift","Error","Object","prototype","hasOwnProperty","call","remainderPath","join","asCID"],"mappings":"AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,OAAO,gBAAgBC,OAAhB,CAAwBC,GAAxB,EAA6BC,IAA7B,EAAmCC,MAAnC,EAA2CC,QAA3C,EAAqDC,OAArD,EAA8D;AACnE,QAAMC,IAAI,GAAG,MAAML,GAAN,IAAa;AACxB,UAAMM,KAAK,GAAG,MAAMJ,MAAM,CAACK,QAAP,CAAgBP,GAAG,CAACQ,IAApB,CAApB;AACA,UAAMC,KAAK,GAAG,MAAMN,QAAQ,CAACH,GAAD,EAAMI,OAAN,CAA5B;AACA,WAAOE,KAAK,CAACI,MAAN,CAAaD,KAAb,CAAP;AACD,GAJD;;AAKA,QAAME,KAAK,GAAGV,IAAI,CAACW,KAAL,CAAW,GAAX,EAAgBC,MAAhB,CAAuBC,OAAvB,CAAd;AACA,MAAIC,KAAK,GAAG,MAAMV,IAAI,CAACL,GAAD,CAAtB;AACA,MAAIgB,OAAO,GAAGhB,GAAd;;AACA,SAAOW,KAAK,CAACM,MAAb,EAAqB;AACnB,UAAMC,GAAG,GAAGP,KAAK,CAACQ,KAAN,EAAZ;;AACA,QAAI,CAACD,GAAL,EAAU;AACR,YAAMpB,OAAO,CAAC,IAAIsB,KAAJ,CAAW,2BAA2BnB,IAAM,GAA5C,CAAD,EAAkD,kBAAlD,CAAb;AACD;;AACD,QAAIoB,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCT,KAArC,EAA4CG,GAA5C,CAAJ,EAAsD;AACpDH,MAAAA,KAAK,GAAGA,KAAK,CAACG,GAAD,CAAb;AACA,YAAM;AACJH,QAAAA,KADI;AAEJU,QAAAA,aAAa,EAAEd,KAAK,CAACe,IAAN,CAAW,GAAX;AAFX,OAAN;AAID,KAND,MAMO;AACL,YAAM5B,OAAO,CAAC,IAAIsB,KAAJ,CAAW,kBAAkBF,GAAK,WAAWF,OAAS,EAAtD,CAAD,EAA2D,aAA3D,CAAb;AACD;;AACD,UAAMhB,GAAG,GAAGH,GAAG,CAAC8B,KAAJ,CAAUZ,KAAV,CAAZ;;AACA,QAAIf,GAAJ,EAAS;AACPgB,MAAAA,OAAO,GAAGhB,GAAV;AACAe,MAAAA,KAAK,GAAG,MAAMV,IAAI,CAACU,KAAD,CAAlB;AACD;AACF;;AACD,QAAM;AACJA,IAAAA,KADI;AAEJU,IAAAA,aAAa,EAAE;AAFX,GAAN;AAID","sourcesContent":["import { CID } from 'multiformats/cid';\nimport errCode from 'err-code';\nexport async function* resolve(cid, path, codecs, getBlock, options) {\n  const load = async cid => {\n    const codec = await codecs.getCodec(cid.code);\n    const block = await getBlock(cid, options);\n    return codec.decode(block);\n  };\n  const parts = path.split('/').filter(Boolean);\n  let value = await load(cid);\n  let lastCid = cid;\n  while (parts.length) {\n    const key = parts.shift();\n    if (!key) {\n      throw errCode(new Error(`Could not resolve path \"${ path }\"`), 'ERR_INVALID_PATH');\n    }\n    if (Object.prototype.hasOwnProperty.call(value, key)) {\n      value = value[key];\n      yield {\n        value,\n        remainderPath: parts.join('/')\n      };\n    } else {\n      throw errCode(new Error(`no link named \"${ key }\" under ${ lastCid }`), 'ERR_NO_LINK');\n    }\n    const cid = CID.asCID(value);\n    if (cid) {\n      lastCid = cid;\n      value = await load(value);\n    }\n  }\n  yield {\n    value,\n    remainderPath: ''\n  };\n}"]},"metadata":{},"sourceType":"module"}