{"ast":null,"code":"import errCode from 'err-code';\nimport { CID } from 'multiformats/cid';\nexport async function* normaliseInput(input) {\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${input}`), 'ERR_UNEXPECTED_INPUT');\n  }\n\n  const cid = CID.asCID(input);\n\n  if (cid) {\n    yield toPin({\n      cid\n    });\n    return;\n  }\n\n  if (input instanceof String || typeof input === 'string') {\n    yield toPin({\n      path: input\n    });\n    return;\n  }\n\n  if (input.cid != null || input.path != null) {\n    return yield toPin(input);\n  }\n\n  if (Symbol.iterator in input) {\n    const iterator = input[Symbol.iterator]();\n    const first = iterator.next();\n    if (first.done) return iterator;\n\n    if (CID.asCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({\n        cid: first.value\n      });\n\n      for (const cid of iterator) {\n        yield toPin({\n          cid\n        });\n      }\n\n      return;\n    }\n\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value);\n\n      for (const obj of iterator) {\n        yield toPin(obj);\n      }\n\n      return;\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n  }\n\n  if (Symbol.asyncIterator in input) {\n    const iterator = input[Symbol.asyncIterator]();\n    const first = await iterator.next();\n    if (first.done) return iterator;\n\n    if (CID.asCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({\n        cid: first.value\n      });\n\n      for await (const cid of iterator) {\n        yield toPin({\n          cid\n        });\n      }\n\n      return;\n    }\n\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value);\n\n      for await (const obj of iterator) {\n        yield toPin(obj);\n      }\n\n      return;\n    }\n\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n}\n\nfunction toPin(input) {\n  const path = input.cid || `${input.path}`;\n\n  if (!path) {\n    throw errCode(new Error('Unexpected input: Please path either a CID or an IPFS path'), 'ERR_UNEXPECTED_INPUT');\n  }\n\n  const pin = {\n    path,\n    recursive: input.recursive !== false\n  };\n\n  if (input.metadata != null) {\n    pin.metadata = input.metadata;\n  }\n\n  return pin;\n}","map":{"version":3,"sources":["/home/alex/Documents/gitest/Marketplace/node_modules/ipfs-core-utils/esm/src/pins/normalise-input.js"],"names":["errCode","CID","normaliseInput","input","undefined","Error","cid","asCID","toPin","String","path","Symbol","iterator","first","next","done","value","obj","asyncIterator","pin","recursive","metadata"],"mappings":"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","sourcesContent":["import errCode from 'err-code';\nimport { CID } from 'multiformats/cid';\nexport async function* normaliseInput(input) {\n  if (input === null || input === undefined) {\n    throw errCode(new Error(`Unexpected input: ${ input }`), 'ERR_UNEXPECTED_INPUT');\n  }\n  const cid = CID.asCID(input);\n  if (cid) {\n    yield toPin({ cid });\n    return;\n  }\n  if (input instanceof String || typeof input === 'string') {\n    yield toPin({ path: input });\n    return;\n  }\n  if (input.cid != null || input.path != null) {\n    return yield toPin(input);\n  }\n  if (Symbol.iterator in input) {\n    const iterator = input[Symbol.iterator]();\n    const first = iterator.next();\n    if (first.done)\n      return iterator;\n    if (CID.asCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ cid: first.value });\n      for (const cid of iterator) {\n        yield toPin({ cid });\n      }\n      return;\n    }\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value);\n      for (const obj of iterator) {\n        yield toPin(obj);\n      }\n      return;\n    }\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n  }\n  if (Symbol.asyncIterator in input) {\n    const iterator = input[Symbol.asyncIterator]();\n    const first = await iterator.next();\n    if (first.done)\n      return iterator;\n    if (CID.asCID(first.value) || first.value instanceof String || typeof first.value === 'string') {\n      yield toPin({ cid: first.value });\n      for await (const cid of iterator) {\n        yield toPin({ cid });\n      }\n      return;\n    }\n    if (first.value.cid != null || first.value.path != null) {\n      yield toPin(first.value);\n      for await (const obj of iterator) {\n        yield toPin(obj);\n      }\n      return;\n    }\n    throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n  }\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n}\nfunction toPin(input) {\n  const path = input.cid || `${ input.path }`;\n  if (!path) {\n    throw errCode(new Error('Unexpected input: Please path either a CID or an IPFS path'), 'ERR_UNEXPECTED_INPUT');\n  }\n  const pin = {\n    path,\n    recursive: input.recursive !== false\n  };\n  if (input.metadata != null) {\n    pin.metadata = input.metadata;\n  }\n  return pin;\n}"]},"metadata":{},"sourceType":"module"}