{"ast":null,"code":"import basex from '../../vendor/base-x.js';\nimport { coerce } from '../bytes.js';\n\nclass Encoder {\n  constructor(name, prefix, baseEncode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n  }\n\n  encode(bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${this.prefix}${this.baseEncode(bytes)}`;\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n\n}\n\nclass Decoder {\n  constructor(name, prefix, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseDecode = baseDecode;\n  }\n\n  decode(text) {\n    if (typeof text === 'string') {\n      switch (text[0]) {\n        case this.prefix:\n          {\n            return this.baseDecode(text.slice(1));\n          }\n\n        default:\n          {\n            throw Error(`Unable to decode multibase string ${JSON.stringify(text)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);\n          }\n      }\n    } else {\n      throw Error('Can only multibase decode strings');\n    }\n  }\n\n  or(decoder) {\n    return or(this, decoder);\n  }\n\n}\n\nclass ComposedDecoder {\n  constructor(decoders) {\n    this.decoders = decoders;\n  }\n\n  or(decoder) {\n    return or(this, decoder);\n  }\n\n  decode(input) {\n    const prefix = input[0];\n    const decoder = this.decoders[prefix];\n\n    if (decoder) {\n      return decoder.decode(input);\n    } else {\n      throw RangeError(`Unable to decode multibase string ${JSON.stringify(input)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);\n    }\n  }\n\n}\n\nexport const or = (left, right) => new ComposedDecoder({ ...(left.decoders || {\n    [left.prefix]: left\n  }),\n  ...(right.decoders || {\n    [right.prefix]: right\n  })\n});\nexport class Codec {\n  constructor(name, prefix, baseEncode, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n    this.baseDecode = baseDecode;\n    this.encoder = new Encoder(name, prefix, baseEncode);\n    this.decoder = new Decoder(name, prefix, baseDecode);\n  }\n\n  encode(input) {\n    return this.encoder.encode(input);\n  }\n\n  decode(input) {\n    return this.decoder.decode(input);\n  }\n\n}\nexport const from = _ref => {\n  let {\n    name,\n    prefix,\n    encode,\n    decode\n  } = _ref;\n  return new Codec(name, prefix, encode, decode);\n};\nexport const baseX = _ref2 => {\n  let {\n    prefix,\n    name,\n    alphabet\n  } = _ref2;\n  const {\n    encode,\n    decode\n  } = basex(alphabet, name);\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: text => coerce(decode(text))\n  });\n};\n\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  const codes = {};\n\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i;\n  }\n\n  let end = string.length;\n\n  while (string[end - 1] === '=') {\n    --end;\n  }\n\n  const out = new Uint8Array(end * bitsPerChar / 8 | 0);\n  let bits = 0;\n  let buffer = 0;\n  let written = 0;\n\n  for (let i = 0; i < end; ++i) {\n    const value = codes[string[i]];\n\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${name} character`);\n    }\n\n    buffer = buffer << bitsPerChar | value;\n    bits += bitsPerChar;\n\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 255 & buffer >> bits;\n    }\n  }\n\n  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n\n  return out;\n};\n\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '=';\n  const mask = (1 << bitsPerChar) - 1;\n  let out = '';\n  let bits = 0;\n  let buffer = 0;\n\n  for (let i = 0; i < data.length; ++i) {\n    buffer = buffer << 8 | data[i];\n    bits += 8;\n\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar;\n      out += alphabet[mask & buffer >> bits];\n    }\n  }\n\n  if (bits) {\n    out += alphabet[mask & buffer << bitsPerChar - bits];\n  }\n\n  if (pad) {\n    while (out.length * bitsPerChar & 7) {\n      out += '=';\n    }\n  }\n\n  return out;\n};\n\nexport const rfc4648 = _ref3 => {\n  let {\n    name,\n    prefix,\n    bitsPerChar,\n    alphabet\n  } = _ref3;\n  return from({\n    prefix,\n    name,\n\n    encode(input) {\n      return encode(input, alphabet, bitsPerChar);\n    },\n\n    decode(input) {\n      return decode(input, alphabet, bitsPerChar, name);\n    }\n\n  });\n};","map":{"version":3,"sources":["/home/alex/Documents/gitest/Marketplace/node_modules/multiformats/esm/src/bases/base.js"],"names":["basex","coerce","Encoder","constructor","name","prefix","baseEncode","encode","bytes","Uint8Array","Error","Decoder","baseDecode","decode","text","slice","JSON","stringify","or","decoder","ComposedDecoder","decoders","input","RangeError","Object","keys","left","right","Codec","encoder","from","baseX","alphabet","string","bitsPerChar","codes","i","length","end","out","bits","buffer","written","value","undefined","SyntaxError","data","pad","mask","rfc4648"],"mappings":"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","sourcesContent":["import basex from '../../vendor/base-x.js';\nimport { coerce } from '../bytes.js';\nclass Encoder {\n  constructor(name, prefix, baseEncode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n  }\n  encode(bytes) {\n    if (bytes instanceof Uint8Array) {\n      return `${ this.prefix }${ this.baseEncode(bytes) }`;\n    } else {\n      throw Error('Unknown type, must be binary type');\n    }\n  }\n}\nclass Decoder {\n  constructor(name, prefix, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseDecode = baseDecode;\n  }\n  decode(text) {\n    if (typeof text === 'string') {\n      switch (text[0]) {\n      case this.prefix: {\n          return this.baseDecode(text.slice(1));\n        }\n      default: {\n          throw Error(`Unable to decode multibase string ${ JSON.stringify(text) }, ${ this.name } decoder only supports inputs prefixed with ${ this.prefix }`);\n        }\n      }\n    } else {\n      throw Error('Can only multibase decode strings');\n    }\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n}\nclass ComposedDecoder {\n  constructor(decoders) {\n    this.decoders = decoders;\n  }\n  or(decoder) {\n    return or(this, decoder);\n  }\n  decode(input) {\n    const prefix = input[0];\n    const decoder = this.decoders[prefix];\n    if (decoder) {\n      return decoder.decode(input);\n    } else {\n      throw RangeError(`Unable to decode multibase string ${ JSON.stringify(input) }, only inputs prefixed with ${ Object.keys(this.decoders) } are supported`);\n    }\n  }\n}\nexport const or = (left, right) => new ComposedDecoder({\n  ...left.decoders || { [left.prefix]: left },\n  ...right.decoders || { [right.prefix]: right }\n});\nexport class Codec {\n  constructor(name, prefix, baseEncode, baseDecode) {\n    this.name = name;\n    this.prefix = prefix;\n    this.baseEncode = baseEncode;\n    this.baseDecode = baseDecode;\n    this.encoder = new Encoder(name, prefix, baseEncode);\n    this.decoder = new Decoder(name, prefix, baseDecode);\n  }\n  encode(input) {\n    return this.encoder.encode(input);\n  }\n  decode(input) {\n    return this.decoder.decode(input);\n  }\n}\nexport const from = ({name, prefix, encode, decode}) => new Codec(name, prefix, encode, decode);\nexport const baseX = ({prefix, name, alphabet}) => {\n  const {encode, decode} = basex(alphabet, name);\n  return from({\n    prefix,\n    name,\n    encode,\n    decode: text => coerce(decode(text))\n  });\n};\nconst decode = (string, alphabet, bitsPerChar, name) => {\n  const codes = {};\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i;\n  }\n  let end = string.length;\n  while (string[end - 1] === '=') {\n    --end;\n  }\n  const out = new Uint8Array(end * bitsPerChar / 8 | 0);\n  let bits = 0;\n  let buffer = 0;\n  let written = 0;\n  for (let i = 0; i < end; ++i) {\n    const value = codes[string[i]];\n    if (value === undefined) {\n      throw new SyntaxError(`Non-${ name } character`);\n    }\n    buffer = buffer << bitsPerChar | value;\n    bits += bitsPerChar;\n    if (bits >= 8) {\n      bits -= 8;\n      out[written++] = 255 & buffer >> bits;\n    }\n  }\n  if (bits >= bitsPerChar || 255 & buffer << 8 - bits) {\n    throw new SyntaxError('Unexpected end of data');\n  }\n  return out;\n};\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '=';\n  const mask = (1 << bitsPerChar) - 1;\n  let out = '';\n  let bits = 0;\n  let buffer = 0;\n  for (let i = 0; i < data.length; ++i) {\n    buffer = buffer << 8 | data[i];\n    bits += 8;\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar;\n      out += alphabet[mask & buffer >> bits];\n    }\n  }\n  if (bits) {\n    out += alphabet[mask & buffer << bitsPerChar - bits];\n  }\n  if (pad) {\n    while (out.length * bitsPerChar & 7) {\n      out += '=';\n    }\n  }\n  return out;\n};\nexport const rfc4648 = ({name, prefix, bitsPerChar, alphabet}) => {\n  return from({\n    prefix,\n    name,\n    encode(input) {\n      return encode(input, alphabet, bitsPerChar);\n    },\n    decode(input) {\n      return decode(input, alphabet, bitsPerChar, name);\n    }\n  });\n};"]},"metadata":{},"sourceType":"module"}