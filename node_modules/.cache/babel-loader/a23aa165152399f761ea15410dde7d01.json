{"ast":null,"code":"import { showThrottleMessage } from \"./formatter\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst defaultApiKey = \"9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972\";\n\nfunction getHost(name) {\n  switch (name) {\n    case \"homestead\":\n      return \"rpc.ankr.com/eth/\";\n\n    case \"matic\":\n      return \"rpc.ankr.com/polygon/\";\n\n    case \"arbitrum\":\n      return \"rpc.ankr.com/arbitrum/\";\n  }\n\n  return logger.throwArgumentError(\"unsupported network\", \"name\", name);\n}\n\nexport class AnkrProvider extends UrlJsonRpcProvider {\n  isCommunityResource() {\n    return this.apiKey === defaultApiKey;\n  }\n\n  static getApiKey(apiKey) {\n    if (apiKey == null) {\n      return defaultApiKey;\n    }\n\n    return apiKey;\n  }\n\n  static getUrl(network, apiKey) {\n    if (apiKey == null) {\n      apiKey = defaultApiKey;\n    }\n\n    const connection = {\n      allowGzip: true,\n      url: \"https:/\\/\" + getHost(network.name) + apiKey,\n      throttleCallback: (attempt, url) => {\n        if (apiKey.apiKey === defaultApiKey) {\n          showThrottleMessage();\n        }\n\n        return Promise.resolve(true);\n      }\n    };\n\n    if (apiKey.projectSecret != null) {\n      connection.user = \"\";\n      connection.password = apiKey.projectSecret;\n    }\n\n    return connection;\n  }\n\n}","map":{"version":3,"mappings":"AAGA,SAASA,mBAAT,QAAoC,aAApC;AACA,SAASC,kBAAT,QAAmC,yBAAnC;AAIA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,MAAMC,MAAM,GAAG,IAAIF,MAAJ,CAAWC,OAAX,CAAf;AAGA,MAAME,aAAa,GAAG,kEAAtB;;AAEA,SAASC,OAAT,CAAiBC,IAAjB,EAA6B;AACzB,UAAQA,IAAR;AACI,SAAK,WAAL;AACI,aAAO,mBAAP;;AACJ,SAAK,OAAL;AACI,aAAO,uBAAP;;AACJ,SAAK,UAAL;AACI,aAAO,wBAAP;AANR;;AAQA,SAAOH,MAAM,CAACI,kBAAP,CAA0B,qBAA1B,EAAiD,MAAjD,EAAyDD,IAAzD,CAAP;AACH;;AAED,OAAM,MAAOE,YAAP,SAA4BR,kBAA5B,CAA8C;AAGhDS,qBAAmB;AACf,WAAQ,KAAKC,MAAL,KAAgBN,aAAxB;AACH;;AAEe,SAATO,SAAS,CAACD,MAAD,EAAY;AACxB,QAAIA,MAAM,IAAI,IAAd,EAAoB;AAAE,aAAON,aAAP;AAAuB;;AAC7C,WAAOM,MAAP;AACH;;AAEY,SAANE,MAAM,CAACC,OAAD,EAAmBH,MAAnB,EAA8B;AACvC,QAAIA,MAAM,IAAI,IAAd,EAAoB;AAAEA,YAAM,GAAGN,aAAT;AAAyB;;AAC/C,UAAMU,UAAU,GAAmB;AAC/BC,eAAS,EAAE,IADoB;AAE/BC,SAAG,EAAG,cAAcX,OAAO,CAACQ,OAAO,CAACP,IAAT,CAArB,GAAsCI,MAFb;AAG/BO,sBAAgB,EAAE,CAACC,OAAD,EAAkBF,GAAlB,KAAiC;AAC/C,YAAIN,MAAM,CAACA,MAAP,KAAkBN,aAAtB,EAAqC;AACjCL,6BAAmB;AACtB;;AACD,eAAOoB,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AACH;AAR8B,KAAnC;;AAWA,QAAIV,MAAM,CAACW,aAAP,IAAwB,IAA5B,EAAkC;AAC9BP,gBAAU,CAACQ,IAAX,GAAkB,EAAlB;AACAR,gBAAU,CAACS,QAAX,GAAsBb,MAAM,CAACW,aAA7B;AACH;;AAED,WAAOP,UAAP;AACH;;AA/B+C","names":["showThrottleMessage","UrlJsonRpcProvider","Logger","version","logger","defaultApiKey","getHost","name","throwArgumentError","AnkrProvider","isCommunityResource","apiKey","getApiKey","getUrl","network","connection","allowGzip","url","throttleCallback","attempt","Promise","resolve","projectSecret","user","password"],"sources":["/home/alex/Documents/gitest/Marketplace/node_modules/@ethersproject/providers/src.ts/ankr-provider.ts"],"sourcesContent":["\nimport { Network } from \"@ethersproject/networks\";\n\nimport { showThrottleMessage } from \"./formatter\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\nimport type { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n\nconst defaultApiKey = \"9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972\";\n\nfunction getHost(name: string): string {\n    switch (name) {\n        case \"homestead\":\n            return \"rpc.ankr.com/eth/\";\n        case \"matic\":\n            return \"rpc.ankr.com/polygon/\";\n        case \"arbitrum\":\n            return \"rpc.ankr.com/arbitrum/\";\n    }\n    return logger.throwArgumentError(\"unsupported network\", \"name\", name);\n}\n\nexport class AnkrProvider extends UrlJsonRpcProvider {\n    readonly apiKey: string;\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey == null) { return defaultApiKey; }\n        return apiKey;\n    }\n\n    static getUrl(network: Network, apiKey: any): ConnectionInfo {\n        if (apiKey == null) { apiKey = defaultApiKey; }\n        const connection: ConnectionInfo = {\n            allowGzip: true,\n            url: (\"https:/\\/\" + getHost(network.name) + apiKey),\n            throttleCallback: (attempt: number, url: string) => {\n                if (apiKey.apiKey === defaultApiKey) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n\n        if (apiKey.projectSecret != null) {\n            connection.user = \"\";\n            connection.password = apiKey.projectSecret\n        }\n\n        return connection;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}