{"ast":null,"code":"import { Multiaddr } from 'multiaddr';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createAddrs = configure(api => {\n  async function addrs() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const res = await api.post('swarm/addrs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    });\n    const {\n      Addrs\n    } = await res.json();\n    return Object.keys(Addrs).map(id => ({\n      id,\n      addrs: (Addrs[id] || []).map(a => new Multiaddr(a))\n    }));\n  }\n\n  return addrs;\n});","map":{"version":3,"sources":["/home/alex/Documents/gitest/Marketplace/node_modules/ipfs-http-client/esm/src/swarm/addrs.js"],"names":["Multiaddr","configure","toUrlSearchParams","createAddrs","api","addrs","options","res","post","signal","searchParams","headers","Addrs","json","Object","keys","map","id","a"],"mappings":"AAAA,SAASA,SAAT,QAA0B,WAA1B;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,OAAO,MAAMC,WAAW,GAAGF,SAAS,CAACG,GAAG,IAAI;AAC1C,iBAAeC,KAAf,GAAmC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACjC,UAAMC,GAAG,GAAG,MAAMH,GAAG,CAACI,IAAJ,CAAS,aAAT,EAAwB;AACxCC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MADwB;AAExCC,MAAAA,YAAY,EAAER,iBAAiB,CAACI,OAAD,CAFS;AAGxCK,MAAAA,OAAO,EAAEL,OAAO,CAACK;AAHuB,KAAxB,CAAlB;AAKA,UAAM;AAACC,MAAAA;AAAD,QAAU,MAAML,GAAG,CAACM,IAAJ,EAAtB;AACA,WAAOC,MAAM,CAACC,IAAP,CAAYH,KAAZ,EAAmBI,GAAnB,CAAuBC,EAAE,KAAK;AACnCA,MAAAA,EADmC;AAEnCZ,MAAAA,KAAK,EAAE,CAACO,KAAK,CAACK,EAAD,CAAL,IAAa,EAAd,EAAkBD,GAAlB,CAAsBE,CAAC,IAAI,IAAIlB,SAAJ,CAAckB,CAAd,CAA3B;AAF4B,KAAL,CAAzB,CAAP;AAID;;AACD,SAAOb,KAAP;AACD,CAdmC,CAA7B","sourcesContent":["import { Multiaddr } from 'multiaddr';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createAddrs = configure(api => {\n  async function addrs(options = {}) {\n    const res = await api.post('swarm/addrs', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers\n    });\n    const {Addrs} = await res.json();\n    return Object.keys(Addrs).map(id => ({\n      id,\n      addrs: (Addrs[id] || []).map(a => new Multiaddr(a))\n    }));\n  }\n  return addrs;\n});"]},"metadata":{},"sourceType":"module"}