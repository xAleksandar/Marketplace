{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createGc = configure(api => {\n  async function* gc() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const res = await api.post('repo/gc', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers,\n      transform: res => {\n        return {\n          err: res.Error ? new Error(res.Error) : null,\n          cid: (res.Key || {})['/'] ? CID.parse(res.Key['/']) : null\n        };\n      }\n    });\n    yield* res.ndjson();\n  }\n\n  return gc;\n});","map":{"version":3,"sources":["/home/alex/Documents/gitest/Marketplace/node_modules/ipfs-http-client/esm/src/repo/gc.js"],"names":["CID","configure","toUrlSearchParams","createGc","api","gc","options","res","post","signal","searchParams","headers","transform","err","Error","cid","Key","parse","ndjson"],"mappings":"AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,OAAO,MAAMC,QAAQ,GAAGF,SAAS,CAACG,GAAG,IAAI;AACvC,kBAAgBC,EAAhB,GAAiC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAC/B,UAAMC,GAAG,GAAG,MAAMH,GAAG,CAACI,IAAJ,CAAS,SAAT,EAAoB;AACpCC,MAAAA,MAAM,EAAEH,OAAO,CAACG,MADoB;AAEpCC,MAAAA,YAAY,EAAER,iBAAiB,CAACI,OAAD,CAFK;AAGpCK,MAAAA,OAAO,EAAEL,OAAO,CAACK,OAHmB;AAIpCC,MAAAA,SAAS,EAAEL,GAAG,IAAI;AAChB,eAAO;AACLM,UAAAA,GAAG,EAAEN,GAAG,CAACO,KAAJ,GAAY,IAAIA,KAAJ,CAAUP,GAAG,CAACO,KAAd,CAAZ,GAAmC,IADnC;AAELC,UAAAA,GAAG,EAAE,CAACR,GAAG,CAACS,GAAJ,IAAW,EAAZ,EAAgB,GAAhB,IAAuBhB,GAAG,CAACiB,KAAJ,CAAUV,GAAG,CAACS,GAAJ,CAAQ,GAAR,CAAV,CAAvB,GAAiD;AAFjD,SAAP;AAID;AATmC,KAApB,CAAlB;AAWA,WAAOT,GAAG,CAACW,MAAJ,EAAP;AACD;;AACD,SAAOb,EAAP;AACD,CAhBgC,CAA1B","sourcesContent":["import { CID } from 'multiformats/cid';\nimport { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nexport const createGc = configure(api => {\n  async function* gc(options = {}) {\n    const res = await api.post('repo/gc', {\n      signal: options.signal,\n      searchParams: toUrlSearchParams(options),\n      headers: options.headers,\n      transform: res => {\n        return {\n          err: res.Error ? new Error(res.Error) : null,\n          cid: (res.Key || {})['/'] ? CID.parse(res.Key['/']) : null\n        };\n      }\n    });\n    yield* res.ndjson();\n  }\n  return gc;\n});"]},"metadata":{},"sourceType":"module"}