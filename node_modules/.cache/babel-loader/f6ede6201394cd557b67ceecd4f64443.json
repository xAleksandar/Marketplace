{"ast":null,"code":"var _jsxFileName = \"/home/alex/Documents/gitest/Marketplace/src/components/CardItem.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Row, Form, Button } from 'react-bootstrap';\nimport './Item.css';\nimport { ethers } from \"ethers\";\nimport MarketplaceAbi from './../contractsData/Marketplace.json';\nimport MarketplaceAddress from './../contractsData/Marketplace-address.json';\nimport NFTAbi from './../contractsData/NFT.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CardItem = props => {\n  _s();\n\n  const [price, setPrice] = useState(null);\n\n  async function approveAndSell() {\n    const NFTcontract = new ethers.Contract(props.collection, NFTAbi.abi, props.signer);\n    const approved = await NFTcontract.approve(MarketplaceAddress.address, props.tokenid);\n    const weiprice = ethers.utils.parseEther(price.toString());\n    const marketplace = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi.abi, props.signer);\n    const totalitems = (await marketplace.lengthItems()).toString();\n\n    for (let i = 0; i <= totalitems; i++) {\n      let nft = await marketplace.items(i);\n      let nftid = nft.tokenId.toString();\n      let nftaddress = nft.nft;\n\n      if (nftid == props.tokenid && nftaddress == props.collection) {\n        await marketplace.sellNFT(i, weiprice);\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card__body\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: props.image,\n        className: \"card__image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"card__title\",\n        children: props.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n      onChange: e => setPrice(e.target.value),\n      size: \"lg\",\n      required: true,\n      type: \"number\",\n      placeholder: \"Price in ETH\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => approveAndSell(),\n      className: \"card__btn\",\n      children: \"approve & sell\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CardItem, \"vbDBwyZPOT6S9w40r+PMwg6I/XQ=\");\n\n_c = CardItem;\nexport default CardItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardItem\");","map":{"version":3,"sources":["/home/alex/Documents/gitest/Marketplace/src/components/CardItem.js"],"names":["React","useState","Row","Form","Button","ethers","MarketplaceAbi","MarketplaceAddress","NFTAbi","CardItem","props","price","setPrice","approveAndSell","NFTcontract","Contract","collection","abi","signer","approved","approve","address","tokenid","weiprice","utils","parseEther","toString","marketplace","totalitems","lengthItems","i","nft","items","nftid","tokenId","nftaddress","sellNFT","image","name","e","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,MAApB,QAAkC,iBAAlC;AACA,OAAO,YAAP;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,cAAP,MAA4B,qCAA5B;AACA,OAAOC,kBAAP,MAA+B,6CAA/B;AACA,OAAOC,MAAP,MAAmB,6BAAnB;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AAExB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,IAAD,CAAlC;;AAEA,iBAAeY,cAAf,GAAgC;AAC5B,UAAMC,WAAW,GAAG,IAAIT,MAAM,CAACU,QAAX,CAAoBL,KAAK,CAACM,UAA1B,EAAsCR,MAAM,CAACS,GAA7C,EAAkDP,KAAK,CAACQ,MAAxD,CAApB;AACA,UAAMC,QAAQ,GAAG,MAAML,WAAW,CAACM,OAAZ,CAAoBb,kBAAkB,CAACc,OAAvC,EAAgDX,KAAK,CAACY,OAAtD,CAAvB;AACA,UAAMC,QAAQ,GAAGlB,MAAM,CAACmB,KAAP,CAAaC,UAAb,CAAwBd,KAAK,CAACe,QAAN,EAAxB,CAAjB;AACA,UAAMC,WAAW,GAAG,IAAItB,MAAM,CAACU,QAAX,CAAoBR,kBAAkB,CAACc,OAAvC,EAAgDf,cAAc,CAACW,GAA/D,EAAoEP,KAAK,CAACQ,MAA1E,CAApB;AACA,UAAMU,UAAU,GAAG,CAAC,MAAMD,WAAW,CAACE,WAAZ,EAAP,EAAkCH,QAAlC,EAAnB;;AAEA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAGF,UAApB,EAAgCE,CAAC,EAAjC,EAAqC;AACjC,UAAIC,GAAG,GAAG,MAAMJ,WAAW,CAACK,KAAZ,CAAkBF,CAAlB,CAAhB;AACA,UAAIG,KAAK,GAAGF,GAAG,CAACG,OAAJ,CAAYR,QAAZ,EAAZ;AACA,UAAIS,UAAU,GAAGJ,GAAG,CAACA,GAArB;;AAEA,UAAIE,KAAK,IAAIvB,KAAK,CAACY,OAAf,IAA0Ba,UAAU,IAAIzB,KAAK,CAACM,UAAlD,EAA8D;AAC1D,cAAMW,WAAW,CAACS,OAAZ,CAAoBN,CAApB,EAAuBP,QAAvB,CAAN;AACH;AACJ;AAGJ;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,8BACI;AAAK,QAAA,GAAG,EAAEb,KAAK,CAAC2B,KAAhB;AAAuB,QAAA,SAAS,EAAC;AAAjC;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAI,QAAA,SAAS,EAAC,aAAd;AAAA,kBAA6B3B,KAAK,CAAC4B;AAAnC;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI,QAAC,IAAD,CAAM,OAAN;AAAc,MAAA,QAAQ,EAAGC,CAAD,IAAO3B,QAAQ,CAAC2B,CAAC,CAACC,MAAF,CAASC,KAAV,CAAvC;AAAyD,MAAA,IAAI,EAAC,IAA9D;AAAmE,MAAA,QAAQ,MAA3E;AAA4E,MAAA,IAAI,EAAC,QAAjF;AAA0F,MAAA,WAAW,EAAC;AAAtG;AAAA;AAAA;AAAA;AAAA,YALJ,eAMI;AAAQ,MAAA,OAAO,EAAE,MAAM5B,cAAc,EAArC;AAAyC,MAAA,SAAS,EAAC,WAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CAlCD;;GAAMJ,Q;;KAAAA,Q;AAoCN,eAAeA,QAAf","sourcesContent":["import React, {useState} from 'react'\nimport { Row, Form, Button } from 'react-bootstrap'\nimport './Item.css'\nimport { ethers } from \"ethers\"\nimport MarketplaceAbi from  './../contractsData/Marketplace.json'\nimport MarketplaceAddress from './../contractsData/Marketplace-address.json'\nimport NFTAbi from './../contractsData/NFT.json'\n\nconst CardItem = (props) => {\n\n    const [price, setPrice] = useState(null)\n\n    async function approveAndSell() {\n        const NFTcontract = new ethers.Contract(props.collection, NFTAbi.abi, props.signer)\n        const approved = await NFTcontract.approve(MarketplaceAddress.address, props.tokenid)\n        const weiprice = ethers.utils.parseEther(price.toString())\n        const marketplace = new ethers.Contract(MarketplaceAddress.address, MarketplaceAbi.abi, props.signer)\n        const totalitems = (await marketplace.lengthItems()).toString()\n        \n        for (let i = 0; i <=totalitems; i++) {\n            let nft = await marketplace.items(i)\n            let nftid = nft.tokenId.toString()\n            let nftaddress = nft.nft\n            \n            if (nftid == props.tokenid && nftaddress == props.collection) {\n                await marketplace.sellNFT(i, weiprice)\n            }\n        }\n\n        \n    }\n\n    return (\n        <div className=\"card\">\n            <div className=\"card__body\">\n                <img src={props.image} className=\"card__image\" />\n                <h2 className=\"card__title\">{props.name}</h2>\n            </div>\n            <Form.Control onChange={(e) => setPrice(e.target.value)} size=\"lg\" required type=\"number\" placeholder=\"Price in ETH\" />\n            <button onClick={() => approveAndSell()} className=\"card__btn\">approve & sell</button>\n        </div>\n    )\n}\n\nexport default CardItem;"]},"metadata":{},"sourceType":"module"}