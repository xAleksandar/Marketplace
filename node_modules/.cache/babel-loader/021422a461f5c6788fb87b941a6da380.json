{"ast":null,"code":"import { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { abortSignal } from '../lib/abort-signal.js';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { mapEvent } from './map-event.js';\nexport const createPut = configure(api => {\n  async function* put(key, value) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    const res = await api.post('dht/put', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: key instanceof Uint8Array ? uint8ArrayToString(key) : key.toString(),\n        ...options\n      }),\n      ...(await multipartRequest([value], controller, options.headers))\n    });\n\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event);\n    }\n  }\n\n  return put;\n});","map":{"version":3,"sources":["/home/alex/Documents/gitest/Marketplace/node_modules/ipfs-http-client/esm/src/dht/put.js"],"names":["configure","toUrlSearchParams","multipartRequest","abortSignal","toString","uint8ArrayToString","mapEvent","createPut","api","put","key","value","options","controller","AbortController","signal","res","post","searchParams","arg","Uint8Array","headers","event","ndjson"],"mappings":"AAAA,SAASA,SAAT,QAA0B,qBAA1B;AACA,SAASC,iBAAT,QAAkC,gCAAlC;AACA,SAASC,gBAAT,QAAiC,mCAAjC;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,QAAQ,IAAIC,kBAArB,QAA+C,uBAA/C;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,OAAO,MAAMC,SAAS,GAAGP,SAAS,CAACQ,GAAG,IAAI;AACxC,kBAAgBC,GAAhB,CAAoBC,GAApB,EAAyBC,KAAzB,EAA8C;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAC5C,UAAMC,UAAU,GAAG,IAAIC,eAAJ,EAAnB;AACA,UAAMC,MAAM,GAAGZ,WAAW,CAACU,UAAU,CAACE,MAAZ,EAAoBH,OAAO,CAACG,MAA5B,CAA1B;AACA,UAAMC,GAAG,GAAG,MAAMR,GAAG,CAACS,IAAJ,CAAS,SAAT,EAAoB;AACpCF,MAAAA,MADoC;AAEpCG,MAAAA,YAAY,EAAEjB,iBAAiB,CAAC;AAC9BkB,QAAAA,GAAG,EAAET,GAAG,YAAYU,UAAf,GAA4Bf,kBAAkB,CAACK,GAAD,CAA9C,GAAsDA,GAAG,CAACN,QAAJ,EAD7B;AAE9B,WAAGQ;AAF2B,OAAD,CAFK;AAMpC,UAAG,MAAMV,gBAAgB,CAAC,CAACS,KAAD,CAAD,EAAUE,UAAV,EAAsBD,OAAO,CAACS,OAA9B,CAAzB;AANoC,KAApB,CAAlB;;AAQA,eAAW,MAAMC,KAAjB,IAA0BN,GAAG,CAACO,MAAJ,EAA1B,EAAwC;AACtC,YAAMjB,QAAQ,CAACgB,KAAD,CAAd;AACD;AACF;;AACD,SAAOb,GAAP;AACD,CAjBiC,CAA3B","sourcesContent":["import { configure } from '../lib/configure.js';\nimport { toUrlSearchParams } from '../lib/to-url-search-params.js';\nimport { multipartRequest } from 'ipfs-core-utils/multipart-request';\nimport { abortSignal } from '../lib/abort-signal.js';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { mapEvent } from './map-event.js';\nexport const createPut = configure(api => {\n  async function* put(key, value, options = {}) {\n    const controller = new AbortController();\n    const signal = abortSignal(controller.signal, options.signal);\n    const res = await api.post('dht/put', {\n      signal,\n      searchParams: toUrlSearchParams({\n        arg: key instanceof Uint8Array ? uint8ArrayToString(key) : key.toString(),\n        ...options\n      }),\n      ...await multipartRequest([value], controller, options.headers)\n    });\n    for await (const event of res.ndjson()) {\n      yield mapEvent(event);\n    }\n  }\n  return put;\n});"]},"metadata":{},"sourceType":"module"}