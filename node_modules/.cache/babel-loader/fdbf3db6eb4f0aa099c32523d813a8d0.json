{"ast":null,"code":"import errCode from 'err-code';\nimport browserStreamToIt from 'browser-readablestream-to-it';\nimport itPeekable from 'it-peekable';\nimport map from 'it-map';\nimport { isBytes, isBlob, isReadableStream, isFileObject } from './utils.js';\nimport { parseMtime, parseMode } from 'ipfs-unixfs';\nexport async function* normaliseCandidateMultiple(input, normaliseContent) {\n  if (typeof input === 'string' || input instanceof String || isBytes(input) || isBlob(input) || input._readableState) {\n    throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');\n  }\n\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input);\n  }\n\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable(input);\n    const {\n      value,\n      done\n    } = await peekable.peek();\n\n    if (done) {\n      yield* [];\n      return;\n    }\n\n    peekable.push(value);\n\n    if (Number.isInteger(value)) {\n      throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');\n    }\n\n    if (value._readableState) {\n      yield* map(peekable, value => toFileObject({\n        content: value\n      }, normaliseContent));\n      return;\n    }\n\n    if (isBytes(value)) {\n      yield toFileObject({\n        content: peekable\n      }, normaliseContent);\n      return;\n    }\n\n    if (isFileObject(value) || value[Symbol.iterator] || value[Symbol.asyncIterator] || isReadableStream(value) || isBlob(value)) {\n      yield* map(peekable, value => toFileObject(value, normaliseContent));\n      return;\n    }\n  }\n\n  if (isFileObject(input)) {\n    throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');\n  }\n\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n}\n\nasync function toFileObject(input, normaliseContent) {\n  const {\n    path,\n    mode,\n    mtime,\n    content\n  } = input;\n  const file = {\n    path: path || '',\n    mode: parseMode(mode),\n    mtime: parseMtime(mtime)\n  };\n\n  if (content) {\n    file.content = await normaliseContent(content);\n  } else if (!path) {\n    file.content = await normaliseContent(input);\n  }\n\n  return file;\n}","map":{"version":3,"sources":["/home/alex/Documents/gitest/Marketplace/node_modules/ipfs-core-utils/esm/src/files/normalise-candidate-multiple.js"],"names":["errCode","browserStreamToIt","itPeekable","map","isBytes","isBlob","isReadableStream","isFileObject","parseMtime","parseMode","normaliseCandidateMultiple","input","normaliseContent","String","_readableState","Error","Symbol","iterator","asyncIterator","peekable","value","done","peek","push","Number","isInteger","toFileObject","content","path","mode","mtime","file"],"mappings":"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","sourcesContent":["import errCode from 'err-code';\nimport browserStreamToIt from 'browser-readablestream-to-it';\nimport itPeekable from 'it-peekable';\nimport map from 'it-map';\nimport {\n  isBytes,\n  isBlob,\n  isReadableStream,\n  isFileObject\n} from './utils.js';\nimport {\n  parseMtime,\n  parseMode\n} from 'ipfs-unixfs';\nexport async function* normaliseCandidateMultiple(input, normaliseContent) {\n  if (typeof input === 'string' || input instanceof String || isBytes(input) || isBlob(input) || input._readableState) {\n    throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');\n  }\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input);\n  }\n  if (Symbol.iterator in input || Symbol.asyncIterator in input) {\n    const peekable = itPeekable(input);\n    const {value, done} = await peekable.peek();\n    if (done) {\n      yield* [];\n      return;\n    }\n    peekable.push(value);\n    if (Number.isInteger(value)) {\n      throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');\n    }\n    if (value._readableState) {\n      yield* map(peekable, value => toFileObject({ content: value }, normaliseContent));\n      return;\n    }\n    if (isBytes(value)) {\n      yield toFileObject({ content: peekable }, normaliseContent);\n      return;\n    }\n    if (isFileObject(value) || value[Symbol.iterator] || value[Symbol.asyncIterator] || isReadableStream(value) || isBlob(value)) {\n      yield* map(peekable, value => toFileObject(value, normaliseContent));\n      return;\n    }\n  }\n  if (isFileObject(input)) {\n    throw errCode(new Error('Unexpected input: single item passed - if you are using ipfs.addAll, please use ipfs.add instead'), 'ERR_UNEXPECTED_INPUT');\n  }\n  throw errCode(new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n}\nasync function toFileObject(input, normaliseContent) {\n  const {path, mode, mtime, content} = input;\n  const file = {\n    path: path || '',\n    mode: parseMode(mode),\n    mtime: parseMtime(mtime)\n  };\n  if (content) {\n    file.content = await normaliseContent(content);\n  } else if (!path) {\n    file.content = await normaliseContent(input);\n  }\n  return file;\n}"]},"metadata":{},"sourceType":"module"}